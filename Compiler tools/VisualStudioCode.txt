VSCode编辑器 常用使用方法备忘录
  一.常用命令
    1.通用快捷键
      Ctrl + Shift + P 或 F1： 打开命令面板
      Ctrl + K Ctrl + S：      打开快捷键编辑器
      Ctrl + W：               关闭当前窗口
      Ctrl + ,：               打开用户设置
      Ctrl + `：               打开集成终端
      Shift + Alt + 鼠标左键：  列选择
    2.跳转
      Ctrl + P:            跳转到最近打开的文件            
      Ctrl + Shift + Tab： 在已打开的文件中跳转
      Ctrl + Shift + O：   跳转到文件中的符号
      Ctrl + G：           跳转到文件中的某一行
    3.基本编辑
      Ctrl + Shift + [ / ]：折叠或展开当前代码块
      Ctrl + K Ctrl + C：   添加行注释
      Alt + ← / →：         向前/向编辑位置后跳转    
      Ctrl + Shift + K：    删除当前行
      Alt + ↑ / ↓：         把当前行内容向上/下移动
      Shift + Alt + ↑ / ↓： 把当前行内容向上/下复制
      Ctrl + /：            添加或删除当前行的注释
      Home/end：            光标移动到当前行的起始/结尾
    4.编程语言编辑
      Shift + Alt + F：   格式化文档
      Ctrl + K Ctrl + F： 格式化选定内容
      F12：               跳转到定义
      Alt + F12：         在当前页查看定义
      Shift + F12：       查看引用
      F2：                重命名符号
      Ctrl + .：          快速修复
      Ctrl + Shift + \：  在匹配的括号之间跳转
    5.搜索与替换
      Ctrl + F：        搜索
      Ctrl + H：        替换
      Ctrl + Shift + F：全局搜索
      Ctrl + Shift + H：全局替换
    6.多光标与选择
      Alt + 鼠标左键：        插入一个新的光标
      Shift + Alt + Down/Up：在上/下方添加一个光标
      Ctrl + D：             第一次按下快捷键会选择当前光标处的单词，再次按下快捷键，会在下一个相同单词的位置添加一个新光标
      Ctrl + Shift + L：     会在当前光标处的单词所有出现的位置，都添加光标
      Ctrl + L：             选中当前行
      Shift + Alt + →：      扩大选中的范围
      Shift + Alt + ←：      缩小选中的范围
    7.显示
      Ctrl + =：放大
      Ctrl + -：缩小
    8.编辑器管理
      Ctrl + \：   向右分割编辑器
      Ctrl +1/2/3：把焦点移动到不同的编辑器组
    9.文件管理
      Ctrl + N：           新建文件
      Ctrl + O：           打开文件
      Ctrl + Tab：         向前在已打开的文件中选择一个
      Ctrl + Shift + Tab： 向后在已打开的文件中选择一个


  二.常用设置
    "editor.minimap.enabled":false     控制缩略图显隐
    "workbench.editor.showTabs":false  控制TAB显隐
    "workbench.editor.openPositioning":"left"  设置新TAB的出现位置
    "terminal.integrated.shell.*"  配置Shell
    "terminal.integrated.cwd": "/hone/user"    配置终端的打开路径，终端默认在当前文件夹下打开
    

  三.常用知识
    1. 单击搜索输入框下方的省略号或使用Ctrl+Shift+J快捷键，可以调出高级搜索选项：要包含的文件 和 排除的文件，需要以.开头并且全拼，文件后缀名用 , 分隔
    2. 编程语言定义代码块的起始和结束区域的标记
        编程语言                        起始区域                            结束区域
      CSS/Less/SCSS                  /*#region*/                        /*#endregion*/
      C/C++                          #pragma region                     #pragma endregion
      Java                          //#region或//<editor-flod>         //#endregion或//</editor-flod>
      Python                        #region                            #endregion
      TypeScript/JS                 //#region或//region                //#endregion或//endregion\
      Markdown                      <!--#region-->                     <!--endregion-->
    3.VSCode会自动检测打开的文档来确定所使用的代码缩进，通过自动检测所得出的缩进配置，会覆盖默认配置
    4. 命令行
      在命令行中输入code . ，可以启动VSCode并直接打开当前文件夹
    5. Shift + Alt + F12快捷键或编辑邮件菜单中的Find All Reference，可以打开结果视图查看一个符号的所有引用
    6. Ctrl +Shift + O可以跳转到当前文件中的不同符号，通过输入":"，所有的符号都会按类型进行分组


  五.常用功能
    1. 代码片段
      使用方式
        (1) 通过Ctrl + Shift + P 快捷键打开命令面板，输入并执行Insert Snipper命令，会显示适合当前语言的所有代码片段的列表。
        (2) 在编辑器中编写代码时，VSCode 会提供智能提示功能，通过智能提示即可插入代码片段。
    2. 创建自定义的代码片段
      文件 -> 首选项 -> 用户片段，或 命令面板的 Preferences：Configure User Snippets
      代码片段的定义文件是JSON格式的，并且支持C语言风格的注释

      创建：
        "For Loop": { // 代码片段名称
          "prefix": ["for", "for-const"], // 定义了代码片段在 InteliSense 中触发的单词。字符串的子串也可以作为触发条件。fc也会匹配for-const
          // body 包含了三个占位符 ${2:element} ${1:array} 和 $0，在插入代码片段后，可以通过Tab键在占位符之间按顺序进行跳转，冒号后面是默认的文本，前面的数字是出现的顺序，0是最终的位置
          "body": ["for (const ${2:element} of ${1:array}) {", "\t$0", "}"], // 定义了要被插入的代码片段，它使用了数组，每一个元素表示一行独立的内容。这里有3行代码片段
          "description": "A for loop." // 可选项，定义了在 IntelliSense 中显示的描述性文本
        }
      代码片段的生效范围：
        有两个维度的生效范围：
          (1) 语言维度：定义代码对于哪些语言生效
            每一个代码片段都可以在一种、多种或所有语言的范围内生效。
              ① 一种语言的代码片段会被定义在对应语言的代码片段定义文件中，比如：JavaScript的代码片段被定义在javascript.json中
              ② 多语言的代码片段被定义在以.code-snippets为结尾的JSON文件中，这个文件中有一个scope属性，它会包含一个或多个语言ID，从而定义当前的代码片段对哪些语言生效，如果没有scope属性，当前的代码片段会对所有语言生效。
            
          (2) 项目维度：定义代码片段实在当前项目中生效还是在全局范围内生效
            创建代码片段时的，New Snippets file for '...' 选项创建的是当前项目的代码片段，当前项目的代码片段的定义文件位于.vscode文件夹下的.code-snippets结尾的JSON文件中。对于多人协同开发的项目，当前项目维度的代码片段会十分有用。
      代码片段的语法
        (1)Tabstops
          通过Tabstops，可以使光标在代码片段中跳转。可以使用$1、$2、$3等代码片段中的字符来指定光标的位置。光标会根据指定的位置对$1、$2、$3等依次进行遍历。比较特殊的字符是$0，它是光标抵达的最后一个字符。对于数字一样的Tabstops，在编辑代码片段时，Tabstops中的文本内容也会随之更新。
        (2)占位符
          占位符是包含默认的Tabstops，如：${1:foo}。占位符的文本会被默认地添加到相应Tabstops的位置。
        (3) 选择
          占位符可以把多个值作为文本内容。多个值以逗号分隔，并且用管道字符包围，如：${1|noe,two,three|}。当代码片段被插入后，跳转到对应的占位符时，会出现下拉列表，以便选择对应的文本。
        (4)变量
          通过 $name 或 ${name:default}可以插入变量的值。当变量为空时，会插入默认值或空字符串。
            可以使用的变量，如下所示：
              TM_SELECTED_TEXT：当前被选中的文本
              TM_CURRENT_LINE:  当前光标所在行的文本
              TM_CURRENT_WORD： 当前光标所在的单词
              TM_LINE_INDEX：   从0开始计数的行号
              TM_LINE_NUMBER：  从1开始计数的行号
              TM_FILENAME：     当前文件的文件名
              TM_FILENAME_BASE：当前文件的文件名（不包含扩展名）
              TM_DIRECTORY：    当前文件的目录名
              CLIPBOARD：       当前接贴板的文本内容
              WORKSPACE_NAME：  当前工作区的目录名
            下面的变量可以用来插入日期和时间：
              CURRENT_YEAR：             当前的年份
              CURRENT_YEAR_SHORT：       当前年份的后两位数字
              CURRENT_MONTH：            当前月份的两位数字(如‘02’)
              CURRENT_MONTH_NAME：       当前月份的全称（如‘July’）
              CURRENT_MONTH_NAME_SHORT： 当前月份的简称（如‘Jul’）
              CURRENT_DATE：             当前月份的今天（如‘25’）
              CURRENT_DAY_NAME：         当前是星期几（如‘Monday’）
              CURRENT_DAY_NAME_SHORT：   当前是星期几（简称，如‘Mon’）
              CURRENT_HOUR：             当前的小时数（24小时制）
              CURRENT_MINUTE：           当前的分钟数
              CURRENT_SECOND：           当前的秒数
              CURRENT_SECONDS_UNIX：     UNIX时间（从UTC1970年1月1日0:0:0开始到现在的总秒数）
            下面的变量可以用来插入注释，并且会根据不同的语言插入相应的注释：
              BLOCK_COMMENT_START：  块注释的开始字符。比如，HTML是<!--
              BLOCK_COMMENT_END；    块注释的结束符。比如，HTML是-->
              LINE_COMMENT：         行注释，比如，HTML是<!---->
              
          打开命令面板，输入并执行Preferences：Open Keyboard Shortcuts(JSON)命令，可以打开定义快捷键的keybindings.json文件
            {
              "key": "ctrl+shift+7",                     快捷键绑定命令
              "command": "editor.action.insertSnippet",  要执行的命令的名称，这里的名称是 插入片段
              "when": "editorTextFocus",                 快捷键处于可以触发的条件，这里是 编辑文本焦点
              "args": {
                "snippet": "console.log($1)$0",          设置的代码片段
                "langId": "javascript",                  引入代码片段的语言ID
                "name": "For Loop"                       引入语言JSON文件中的代码片段名称
              }
            }

    3. Git 版本控制插件
      Git分支
        在左下角的状态栏中会显示当前的Git分支。
      当你对本地Git仓库的文件进行更改时，在编辑器的行号与源代码之间的沟槽中会有相应的提示，对于增删改，有以下三种不同的提示：
        · 蓝色条：表明这些行的代码有更改
        · 绿色条：表明新增了代码
        · 红色小三角：表明当前位置删除了代码
      合并冲突
        当VSCode检测到Git合并冲突时，冲突的部分会被高亮显示，还会有不同的内联操作帮助快速解决冲突，如下所示：
          · Accept Current Change：  保留当前的更改
          · Accept Incoming Change： 保留新进来的更改
          · Accept Both Changes:     保留所有的更改
          · Compare Changes：        在diff视图中比较更改
      把VSCode作为Git编辑器
        (1)在命令行中，运行 git config --global core.editor "code --wait"，把VSCode设为Git的默认编辑器
        (2)命令行中运行 git config --global -e，就会调出VSCode来打开全局的.gitconfig文件，以配置Git
        (3)在.gitconfig文件中添加以下配置，把VSCode设置成Git的比较及合并工具
          [diff]
            tool = default-difftool
          [difftool "default-difftool"]
            cmd = code --wait --diff $LOCAL $REMOTE
          [merge]
            tool = code

    4. Task，把重复的工作自动化
      许多工具都可以把重复的任务自动化，包括代码静态检查、编译、打包、测试、部署等。如：
        编译：TypeScript编译器、Java编译器等
        静态检查：ESLint、TSLint等
        代码构建：Make、Ant、Gulp等
      Task（任务）可以被用来运行脚本或启动一个进程。因此，许多工具都可以通过Task直接在VSCode中运行，而不需要额外再命令行中输入命令。Task被配置在.vscode文件夹的tasks.json文件中。
      Task只能配置在有文件夹打开的项目中。
      
      配置Task
        终端 -> 配置任务
        终端 -> 运行任务，会显示出所有可以运行的Task，选择一个Task后，会选择要针对何种错误和警告扫描Task的输出。选择后，一个新的终端被创建，echo Hello命令在终端中执行。按下让任意键，终端会被关闭。
        (1)配置Task定义的属性
          · label：在用户界面上展示的Task标签
          · type:  Task的类型，分为 shell 和 process 两种，具体如下所示：
              shell：作为Shell命令运行（如 bash、cmd、PowerShell等）
              process：作为一个进程运行
          · command：真正执行的命令
          · windows：Windows中的特定属性。相应的属性会在Windows 中覆盖默认的属性定义。
          · group：定义Task属于哪一个组。分为test和build、none。
          · presentation：定义用户界面如何处理Task的输出。
          · options：定义cwd（当前工作目录）、env（环境变量）和shell的值。
          · runOptions：定义Task何时运行及如何运行
        (2)自定义自动检测的Task
          Terminal->Run Task->npm:test的齿轮按钮，tasks.json文件中就会添加一个npm test的配置项，可以基于它来定义更多的设置。
        (3)问题匹配器
          通过问题匹配器，可以对Task的输出进行扫描，找到对应的错误和警告。VSCode中内置了一系列的问题匹配器，可以在tasks.json中使用problemMatcher属性来定义对应相应的问题匹配器。不同语言的problemMatcher属性如下所示：
            · TypeScript: $tsc
            · TypeScript Watch: $tsc-watch
            · JSHint: $jshint
            · JSHint Stylish: $jshint-stylish
            · ESLint Compact: $eslint-compact
            · ESLint Stylish: $eslint-stylish
            · Go: $go
            · CSHarp and VB Compiler: $mscompile
            · Lessc compiler: $lessc
            · Node Sass compiler: $node-sass
        (4)命令参数
          对于复杂的命令可以在tasks.json中使用args属性来定义命令的参数。
            {                                           {
              "label": "dir",                             "label": "dir",
              "type": "shell",             =              "type": "shell",
              "command": "dir",                           "command": "dir /b",
              "args": ["/b"]                            }
            }
        (5)输出行为
          控制集成终端的输出行为，所有与输出相关的行为，都可以通过tasks.json中的presentation属性来定义，主要包含以下属性：
            · reveal: 控制集成终端是否显示。其设置包含以下三种：
                always：集成终端总是会在Task启动时显示。默认设置
                never： 集成终端不会主动显示
                silent：当输出是错误和警告时，集成终端才会显示
            · focus:  控制集成终端在显示时是否取得焦点。默认值是false
            · echo：  控制被执行的命令是否在集成终端中输出。默认值是true
            · showReuseMessage：控制是否显示“终端将被任务重用，按任意键关闭”提示信息。默认值是true
            · panel： 控制不同的Task在运行时是否共享同一个集成终端。其设置包含以下三种：
                shared：共享集成终端。其他Task的运行输出结果也显示在相同的集成终端中。默认设置
                dedicated：Task会有一个专用的集成终端。如果相应的Task再次运行，集成终端就会被复用。但是，其他Task的运行输出结果会显示在不同的集成终端中
                new：每次运行Task都会创建一个新的集成终端
            · clear：控制在Task运行前，是否清除集成终端的输出。默认值是false
            · group: 控制Task是否在同一个集成终端中运行。如果不同Task的group属性相同，那么它们会复用同一个集成终端。
        (6)运行行为
          通过tasks.json中的runOptions属性可以定义Task的运行行为，runOptions属性主要包含以下属性：
            · reevaluateOnRerun：在执行 Rerun Last Task命令时，控制是否重新计算变量。默认值是true
            · runOn：指定何时运行Task。其设置包含以下两种：
                default：只有在运行Run Task命令时，才会触发运行
                foderOpen：当包含这个tasks.json的文件夹被打开时，便会触发运行。在运行前，VSCode会询问你是否要运行。
        (7)变量替换
          在tasks.json中，VSCode可以进行变量替换。
          ① 预定义的变量
            · ${workspaceFolder}：在VSCode中打开的文件夹的完整路径
            · ${workspaceFolderBasename}: 在VSCode中打开的文件夹名
            · ${file}：当前打开文件的完整路径
            · ${relativeFile}:  当前打开的文件的相对workspaceFolder的路径
            · ${relativeFileDirname}：当前打开的文件的文件夹的相对workspaceFolder路径
            · ${fileBasename}：当前打开的文件的文件名
            · ${fileBasenameNoExtension}：当前打开的文件的文件名，不包含扩展名
            · ${fileDirname}: 当前打开的文件的文件夹的完整路径
            · ${fileExtname}：当前打开的文件的扩展名
            · ${cwd}: Task启动时的工作目录
            · ${lineNumber}: 当前光标所在的行号
            · ${selectedText}：当前 打开的文件中选中的文本
            · ${execPath}：VSCode可执行文件的完整路径
            · ${defaultBuildTask}：默认的Build Task的名字 
          ② 环境变量
            通过${env:Name}的语法，可以引用环境变量。
          ③ 配置变量
            通过${config:Name}的语法，可以引用VSCode的设置项。
            比如${config:editor.fontSize}会得到编辑器的字体大小
          ④ 输入变量
            有些时候，在运行Task时，每次都需要传入不同的变量，通过输入变量，可以轻松地对Task进行定制化。输入变量的语法是${input:variableID}，variableID引用了tasks.json中的inputs部分的配置内容
            VSCode支持以下三种类型的输入变量：
              · promptString：展示输入框，并获得用户的输入字符串
                  description：在文本输入框中展示的描述信息
                  default：输入的默认值
              · pickString：  展示一个下拉列表，让用户选择其中一个选项
                  description：在下拉列表的输入框中展示的描述信息
                  options：    选项数组，使用户可以在下拉列表中进行选择
                  default：    输入的默认值。其值必须为下拉列表选项中的一个
              · command：     运行任意的命令
                  command：要运行的命令
                  args：   运行命令的参数（可选）
        (8)操作系统的相关属性
          不同操作系统中的Task命令也可能不同。在Windows上使用windows属性，在Linux上使用linux属性，在macOS上使用osx属性。
          Task的属性可以被定义在全局范围。除非具体的某一个Task定义了相应的属性，否则就使用全局属性
        (9)后台运行的Task
          一些工具可以在后台运行，当文件更新时，便会触发相应的操作。比如：TypeScript的编译器tsc通过--wacth参数对此功能提供了内置的支持。
    
    5. 多项目工作区（multi-root Workspaces)
      在VSCode中，可以方便地管理多个文件夹。
      (1)管理文件夹
        ① 添加文件夹
          文件 -> 将文件夹添加到工作区，选择要添加的文件夹。
        ② 拖拽
          可以通过拖拽把文件夹添加到工作区，可以同时选择多个文件夹拖拽。
        ③ 选择多个文件夹并打开
          文件 -> 打开文件夹，可以选择多个文件夹打开。
        ④ 通过命令行添加文件夹
          通过命令行的--add参数，可以把多个文件夹添加到最近活跃的VSCode窗口中，例如:
            code --add vscode vscode-docs
      (2)工作区文件
        在工作区添加多个文件后，工作区会被命名为 无标题(工作区)。在关闭多文件夹窗口时，会询问是否要保存工作区文件，选择保存工作区文件，VSCode会创建一个扩展名为.code-workspace的文件。
        文件 -> 将工作区另存为，可以把当前工作区的信息保存到 *.code-workspace 工作区文件中
        ① 打开工作区文件
          有三种方式可以打开工作区：
            · 双击.code-workspace工作区文件
            · 文件 -> 打开工作区
            · 文件 -> 打开最近的文件
        ② 工作区文件的格式
          *.code-workspace 工作区文件的属性：
            · path：文件夹的路径，可以是绝对路径，也可以是相对路径
            · name: 文件的显示名
            · settings: 为了避免各个文件设置的冲突，可以通过设置全局的工作区配置，对当前工作区的所有文件夹进行设置，
            · extensions: 插件推荐，可以为当前的工作区项目推荐相应的插件。通过在extensions.recommendations数组中添加插件的ID（{publisherName}.{extensionName}）实现插件推荐
        ③ 用户界面
          与单文件夹界面的区别：
            · 显示相对路径和符号
            · 面包屑导航会显示多文件夹的文件夹名
            · Ctrl+P 快速打开文件时，文件列表会显示文件夹名
            · 搜索时，搜索结果会按照文件夹来分组显示、
      (3)源代码管理
        多文件夹项目如果有多个git的文件夹，那么扎起源代码管理视图中会显示SOURCE CONTROL PROVIDERS，在 SOURCE CONTROL PROVIDERS 中点击代码仓库，可以在下方看到代码更改的详情。
    
    6. 调试与运行
      (1)插件调试器
        VSCode内置了对Node.js运行时的调试支持，无须安装额外的插件就能调试JS和TS。其他编程语言，需要额外安装相应的调试器插件。
      (2)调试模式与运行模式
        在VSCode中，内置的 Node.js 调试器及其他调试器插件支持以下两种模式：
          · 调试模式: 快捷键为F5，命令为 Start Debugging
          · 运行模式: 快捷键为Ctrl+F5，命令为 Run Without Debugging
      (3)launch.json调试配置
        对于一些更加复杂的调试场景，需要创建调试配置，以便后续进行定制化调试。VSCode的调试配置被存储在.vscode文件夹的 launch.json文件中。可以通过以下步骤来创建一个调试配置：
          ① 运行 -> 添加配置
          ② VSCode会在 .vscode 文件夹中创建并打开一个launch.json文件，文件中定义了调试所需要的的配置
      (4)launch.json 属性
        必要属性：
          · type: 调试器的类型。例如：内置的Node.js调试器是node
          · request: 调试的模式，有以下两种模式：
            launch: 启动程序（该程序定义在program设置项中）并调试
            attach: 将程序附加到一个正在运行的进程中进行调试。
          · name: 调试配置的名字
        可选项：
          · presentation: 使用 order、group和hidden属性来定义调试配置的显示
          · preLaunchTask: 定义在调试前要运行的任务
          · postDebugTask: 定义在调试结束时要运行的任务
          · internalConsoleOptions: 定义调试控制台的显示
          · serverReadyAction: 设置在调试时自动在浏览器中打开URL
        大多数调试器插件还支持以下属性：
          · program: 要运行的可执行文件或源代码的路径
          · args: 要传递给program的参数
          · env: 环境变量
          · cwd: 调试器的工作目录，默认值是${workspaceFolder}
          · port: 要附加到进程的端口
          · stopOnEntry: 是否在程序入口进行断点
          · console: 指定程序输出的位置
            internalConsole：VSCode的调试控制台
            integratedTerminal：VSCode的集成终端
            externalTerminal：系统的终端
      (5)全局的launch.json配置
        VSCode 支持添加全局的 launch.json配置。可以在全局的 settings.json文件中使用“launch”属性设置全局的的调试配置
      (6)多目标调试
        VSCode的多目标调试支持同时调试多个应用程序的代码。在launch.json文件中，通过compound属性，可以配置多目标调试
        
        
  六.插件
    插件市场主页： https://marketplace.visualstudio.com/vscode
    1. 插件市场
      (1)首页
        首页有四个分组
        · Featured: 推荐插件
        · Trending: 每日插件安装数量榜
        · Most Popular: 插件总安装量榜
        · Recently Added: 最新发布的插件
    2. 优秀的插件
      (1)REST Clinet
        测试REST API的工具。REST API是前后端分离最佳实践，是开发的一套标准或者说是一套规范。
        REST Client支持cURL和RFC2616这两种业界标准来调用REST API。
          test.http
        ① HTTP语言
          REST Client插件添加了HTTP语言的定义，支持把以.http或.rest结尾的文件中的代码当作HTTP语言进行处理，提供了语法高亮、代码智能提示、代码注释等功能。
          通过###分隔符，同一个http文件中可以涵盖多个HTTP请求。
        ② 代码生成
          在HTTP语言文件的邮件菜单中，可以通过Generate Code Snippet命令来讲HTTP请求生成不同编程语言的代码。
        ③ 高阶功能
          · 身份认证: REST Client支持Basic Auth、SSL Client Certificates、Azure Active Directory等多挣验证机制。
          · 支持Cookies
          · 支持HTTP3xx的重定向
          · 支持多种变量: 环境变量、文件变量、预定义的系统变量等  
      (2)Code Runer
        代码一键运行，支持40多种语言
        ① 代码一键运行
          有四种方式可以运行代码
            · 通过快捷键Ctrl+Alt+N
            · 打开命令面板，输入并执行Run Code
            · 在编辑区域的右键菜单中单击Run Code
            · 在左侧的文件管理器中找到要运行的文件，在其右键菜单中单击Run Code
            · 单击右上角的“运行”小三角按钮
          注意：Code Runer插件并不包含各个编程语言的编译器。需要自行安装相应编程语言的编译器，并且把路径添加到PATH环境变量中。
          