VSCode编辑器 常用使用方法备忘录
  常用命令
    1.通用快捷键
      Ctrl + Shift + P 或 F1： 打开命令面板
      Ctrl + K Ctrl + S：      打开快捷键编辑器
      Ctrl + W：               关闭当前窗口
      Ctrl + ,：               打开用户设置
      Ctrl + `：               打开集成终端
      Shift + Alt + 鼠标左键：  列选择
    2.跳转
      Ctrl + P:            跳转到最近打开的文件            
      Ctrl + Shift + Tab： 在已打开的文件中跳转
      Ctrl + Shift + O：   跳转到文件中的符号
      Ctrl + G：           跳转到文件中的某一行
    3.基本编辑
      Ctrl + Shift + [ / ]：折叠或展开当前代码块
      Ctrl + K Ctrl + C：   添加行注释
      Alt + ← / →：         向前/向编辑位置后跳转    
      Alt + ↑ / ↓：         把当前行内容向上/下复制
      Ctrl + Shift + K：    删除当前行
      Ctrl + /：            添加或删除当前行的注释
      Home/end：            光标移动到当前行的起始/结尾
    4.编程语言编辑
      Shift + Alt + F：   格式化文档
      Ctrl + K Ctrl + F： 格式化选定内容
      F12：               跳转到定义
      Alt + F12：         在当前页查看定义
      Shift + F12：       查看引用
      F2：                重命名符号
      Ctrl + .：          快速修复
      Ctrl + Shift + \：  在匹配的括号之间跳转
    5.搜索与替换
      Ctrl + F：        搜索
      Ctrl + H：        替换
      Ctrl + Shift + F：全局搜索
      Ctrl + Shift + H：全局替换
    6.多光标与选择
      Alt + 鼠标左键：        插入一个新的光标
      Shift + Alt + Down/Up：在上/下方添加一个光标
      Ctrl + D：             第一次按下快捷键会选择当前光标处的单词，再次按下快捷键，会在下一个相同单词的位置添加一个新光标
      Ctrl + Shift + L：     会在当前光标处的单词所有出现的位置，都添加光标
      Ctrl + L：             选中当前行
      Shift + Alt + →：      扩大选中的范围
      Shift + Alt + ←：      缩小选中的范围
    7.显示
      Ctrl + =：放大
      Ctrl + -：缩小
    8.编辑器管理
      Ctrl + \：   向右分割编辑器
      Ctrl +1/2/3：把焦点移动到不同的编辑器组
    9.文件管理
      Ctrl + N：           新建文件
      Ctrl + O：           打开文件
      Ctrl + Tab：         向前在已打开的文件中选择一个
      Ctrl + Shift + Tab： 向后在已打开的文件中选择一个


  常用设置
    "editor.minimap.enabled":false     控制缩略图显隐
    "workbench.editor.showTabs":false  控制TAB显隐
    "workbench.editor.openPositioning":"left"  设置新TAB的出现位置
    "terminal.integrated.shell.*"  配置Shell
    "terminal.integrated.cwd": "/hone/user"    配置终端的打开路径，终端默认在当前文件夹下打开
    

  常用知识
    1. 单击搜索输入框下方的省略号或使用Ctrl+Shift+J快捷键，可以调出高级搜索选项：要包含的文件 和 排除的文件，需要以.开头并且全拼
    2. 编程语言定义代码块的起始和结束区域的标记
        编程语言                        起始区域                            结束区域
      CSS/Less/SCSS                  /*#region*/                        /*#endregion*/
      C/C++                          #pragma region                     #pragma endregion
      Java                          //#region或//<editor-flod>         //#endregion或//</editor-flod>
      Python                        #region                            #endregion
      TypeScript/JS                 //#region或//region                //#endregion或//endregion\
      Markdown                      <!--#region-->                     <!--endregion-->
    3.VSCode会自动检测打开的文档来确定所使用的代码缩进，通过自动检测所得出的缩进配置，会覆盖默认配置
    4. 命令行
      在命令行中输入code . ，可以启动VSCode并直接打开当前文件夹
    5. Shift + Alt + F12快捷键或编辑邮件菜单中的Find All Reference，可以打开结果视图查看一个符号的所有引用
    6. Ctrl +Shift + O可以跳转到当前文件中的不同符号，通过输入":"，所有的符号都会按类型进行分组



  常用功能
    1. 代码片段
      使用方式
        (1) 通过Ctrl + Shift + P 快捷键打开命令面板，输入并执行Insert Snipper命令，会显示适合当前语言的所有代码片段的列表。
        (2) 在编辑器中编写代码时，VSCode 会提供智能提示功能，通过智能提示即可插入代码片段。
    2. 创建自定义的代码片段
      文件 -> 首选项 -> 用户片段，或 命令面板的 Preferences：Configure User Snippets
      代码片段的定义文件是JSON格式的，并且支持C语言风格的注释
      创建：
        "For Loop": { // 代码片段名称
          "prefix": ["for", "for-const"], // 定义了代码片段扎起 InteliSense中触发的单词。字符串的子串也可以作为触发条件。fc也会匹配for-const
          // body 包含了三个占位符 ${2:element} ${1:array} 和 $0，在插入代码片段后，可以通过Tab键在占位符之间按顺序进行跳转，冒号后面是默认的文本，前面的数字是出现的顺序，0是最终的位置
          "body": ["for (const ${2:element} of ${1:array}) {", "\t$0", "}"], // 定义了要被插入的代码片段，它使用了数组，每一个元素表示一行独立的内容。这里有3行代码片段
          "description": "A for loop." // 可选项，定义了在 IntelliSense 中显示的描述性文本
        }
      代码片段的生效范围：
        有两个维度的生效范围：
          (1). 语言维度：定义代码对于哪些语言生效
            每一个代码片段都可以在一种、多种或所有语言的范围内生效。
              ① 一种语言的代码片段会被定义在对应语言的代码片段定义文件中，比如：JavaScript的代码片段被定义在javascript.json中
              ② 多语言的代码片段被定义在以.code-snippets为结尾的JSON文件中，这个文件中有一个scope属性，它会包含一个或多个语言ID，从而定义当前的代码片段对哪些语言生效，如果没有scope属性，哪个当前的代码片段会对所有语言生效。
            
          (2). 项目维度：定义代码片段实在当前项目中生效还是在全局范围内生效。
            常见代码片段时的，New Snippets file for '...'选项创建的是当前项目的代码片段，当前项目的代码片段的定义文件位于.vscode文件夹下的.code-snippets结尾的JSON文件中。对于多人协同开发的项目，当前项目维度的代码片段会十分有用。
      代码片段的语法
        (1) Tabstops
          通过Tabstops，可以使光标在代码片段中跳转。可以使用$1、$2、$3等代码片段中的字符来指定光标的位置。光标会根据指定的位置对$1、$2、$3等依次进行遍历。比较特殊的字符是$0，它是光标抵达的最后一个字符。对于数字一样的Tabstops，在编辑代码片段时，Tabstops中的文本内容也会随之更新。
        (2) 占位符
          占位符是包含默认的Tabstops，如：${1:foo}。占位符的文本会被默认地添加到相应Tabstops的位置。
        (3) 选择
          占位符可以把多个值作为文本内容。多个值以逗号分隔，并且用管道字符包围，如：${1|noe,two,three|}。当代码片段被插入后，跳转到对应的占位符时，会出现下拉列表，以便选择对应的文本。
        (4)变量
          通过 $name 或 ${name:default}可以插入变量的值。当变量为空时，会插入默认值或空字符串。
            可以使用的变量，如下所示：
              TM_SELECTED_TEXT：当前被选中的文本
              TM_CURRENT_LINE:  当前光标所在行的文本
              TM_CURRENT_WORD： 当前光标所在的单词
              TM_LINE_INDEX：   从0开始计数的行号
              TM_LINE_NUMBER：  从1开始计数的行号
              TM_FILENAME：     当前文件的文件名
              TM_FILENAME_BASE：当前文件的文件名（不包含扩展名）
              TM_DIRECTORY：    当前文件的目录名
              CLIPBOARD：       当前接贴板的文本内容
              WORKSPACE_NAME：  当前工作区的目录名
            下面的变量可以用来插入日期和时间：
              CURRENT_YEAR：             当前的年份
              CURRENT_YEAR_SHORT：       当前年份的后两位数字
              CURRENT_MONTH：            当前月份的两位数字(如‘02’)
              CURRENT_MONTH_NAME：       当前月份的全称（如‘July’）
              CURRENT_MONTH_NAME_SHORT： 当前月份的简称（如‘Jul’）
              CURRENT_DATE：             当前月份的今天（如‘25’）
              CURRENT_DAY_NAME：         当前是星期几（如‘Monday’）
              CURRENT_DAY_NAME_SHORT：   当前是星期几（简称，如‘Mon’）
              CURRENT_HOUR：             当前的小时数（24小时制）
              CURRENT_MINUTE：           当前的分钟数
              CURRENT_SECOND：           当前的秒数
              CURRENT_SECONDS_UNIX：     UNIX时间（从UTC1970年1月1日0:0:0开始到现在的总秒数）
            下面的变量可以用来插入注释，并且会根据不同的语言插入相应的注释：
              BLOCK_COMMENT_START：  块注释的开始字符。比如，HTML是<!--
              BLOCK_COMMENT_END；    块注释的结束符。比如，HTML是-->
              LINE_COMMENT：         行注释，比如，HTML是<!---->
              {
                "key": "ctrl+shift+7",                     快捷键绑定命令
                "command": "editor.action.insertSnippet",  要执行的命令的名称，这里的名称是 插入片段
                "when": "editorTextFocus",                 快捷键处于可以触发的条件，这里是 编辑文本焦点
                "args": {
                  "snippet": "console.log($1)$0",          设置的代码片段
                  "langId": "javascript",                  引入语言代码片段的ID
                  "name": "For Loop"                       引入语言JSON文件中的代码片段名称
                }
              }

    3. Task，把重复的工作自动化