javaScript
  一.类型
    JavaScript 语言的每一个值都属于某一种数据类型。JavaScript 语言规定了 7 种语言类型。语言类型广泛用于变量、函数参数、表达式、函数返回值等场合，运行时类型是代码实际执行过程中我们用到的类型。所有的类型数据都会属于 7 个类型之一。从变量、参数、返回值到表达式中间结果，任何 JavaScript 代码运行过程中产生的数据，都具有运行时类型。
    1.Undefined
    2.Null
    3.Boolean
    4.Stirng
    5.Number
    6.Symbol
    7.Object
    有的编程规范要求用void 0代表undefined，为什么？
      Undefined表示未定义，它的类型只有一个值，就是undefined。任何变量在赋值前都是Undefined类型，值为undefined，一般情况下可以用undefined（就是名为undefined的这个变量）来表达这个值，或者void运算来把任意一个表达式变成undefined值。建议使用 void 0或void(0)来获取undefined值。在实际编程时，一般不会把变量赋值为 undefined，这样可以保证所有值为 undefined 的变量，都是从未赋值的自然状态。
    Undefined 和 Null
      Undefined 和 Null 有一定的表意区别，Null表示的是："定义了但是为空"。Null的类型也只有一个值，就是null，与undefined不同null是JS关键字，在任何程序中，都可以使用null关键字来获取null值。
    String
      字符串是否有最大长度？
        String用于表示文本数据，String 有最大长度是 2^53 - 1，String的意义并非字符串，而是字符串的UTF16编码，字符串的操作charAt、charCodeAt、length等方法针对的都是UTF16编码。所以字符串最大长度，都是受字符串的编码长度影响
        JS中的字符串是永远无法变更的，所以字符串具有值类型的特征
        JavaScript 字符串把每个 UTF16 单元当作一个字符来处理，所以处理非 BMP（超出 U+0000 - U+FFFF 范围）的字符时，应该格外小心。
    Number
      JavaScript 中的 Number 类型有 18437736874454810627(即 2^64-2^53+3) 个值。
      JavaScript 中的 Number 类型基本符合 IEEE 754-2008 规定的双精度浮点数规则，但是 JavaScript 为了表达几个额外的语言场景（比如不让除以 0 出错，而引入了无穷大的概念），规定了几个例外情况：
        · NaN，占用了 9007199254740990，这原本是符合 IEEE 规则的数字；
        · Infinity，无穷大；
        · -Infinity，负无穷大；
      JS中有+0 和 -0，在加法类运算中没有区别，但是在除法的场合需要特别留意，除以 -0 会得到 负无穷大，而区分 +0 或 -0 的方式是1/x是Infinity还是-Infinity
      根据双精度浮点数的定义，Number 类型中有效的整数范围是 -0x1fffffffffffff 至 0x1fffffffffffff，所以 Number 无法精确表示此范围外的整数。同样根据浮点数的定义，非整数的 Number 类型无法用 ==（=== 也不行） 来比较，也就是 console.log(0.1 + 0.2 == 0.3)，这里输出的是 false，说明两边不相等，这是浮点运算的特点。浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。
      正确的比较方法是使用JS提供的最小精度值： console.log(Math.abs(0.1 + 0.2 - 0.3) <= Number.EPSILON); 检查等式两侧的绝对值是否小于绝对精度，才是正确比较浮点数的方法。
      Number.EPSILON：ES6 在Number对象上面，新增一个极小的常量Number.EPSILON。根据规格，它表示 1 与大于 1 的最小浮点数之间的差。对于 64 位浮点数来说，大于 1 的最小浮点数相当于二进制的1.00..001，小数点后面有连续 51 个零。这个值减去 1 之后，就等于 2 的 -52 次方。Number.EPSILON实际上是 JavaScript 能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。引入一个这么小的量的目的，在于为浮点数计算，Number.EPSILON可以用来设置“能够接受的误差范围”。
