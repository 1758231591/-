CSS 层叠样式表
  CSS的顶层样式表由两种规则组成的规则列表构成，一种被称为at-rule，就是at规则，另一种是 qualified rule 普通规则。
  一.CSS语法
    1.at-rule at规则
      at-rule 由一个@关键字和后续的一个区块组成，如果没有区块，则以分号结束。这些 at-rule 在开发中使用的机会远远小于普通规则。
      (1) @charset
        用于提示CSS文件使用的字符编码方式，它如果被使用，必须出现在最前面，这个规则只在给出语法解析阶段前使用，并不影响页面上的展示效果。
          例：@charset "utf-8";
      (2) @import
        用于引入一个CSS文件，除了@charset规则不会引入，@import可以引入另一个文件的全部内容。
          例：@import "base.css";  @import url("base.css");
      (3) @media
        是有名的 media query 使用的规则，它能够对设备的类型进行一些判断。针对不同的屏幕尺寸设置不同的样式，适用于设计响应式页面。在media的区块内，就是普通规则。
          例：@media screen and (max-width:600px) { body { background-color:pink;} } /*如果屏幕宽度小于600px则修改背景色*/
      (4) @page
        用于分页媒体访问网页时的表现设置，页面是一种特殊的盒模型结构，除了页面本身，还可以设置它周围的盒。
          例: front_end\CSS\演示文件\at_rule.css 行10
      (5) @counter-style
        产生一种数据，用于定义列表项的表现。
          例：front_end\CSS\演示文件\at_rule.css 行25
      (6) @key-frames
        产生一种数据，定义动画关键帧。
          例：front_end\CSS\演示文件\at_rule.css 行34
      (7) @fontface
        用于定义一种字体，icon font 技术就是利用这个特性实现的。
          例：front_end\CSS\演示文件\at_rule.css 行46
      (8) @support
        检查环境的特性，它与 media 比较类似。
          例：front_end\CSS\演示文件\at_rule.css 行54
      (9) @namespace
        用来定义使用在CSS样式表中的XML命名空间的@规则。定义的命名空间可以把通配、元素和属性选择器限制在指定命名空间里的元素。
        @namespace规则通常在处理包含多个namespaces的文档时才有用，比如HTML5里内联的SVG、MathML或者混合多个词汇表的XML。
          例：front_end\CSS\演示文件\at_rule.css 行67
          注意：任何 @namespace 规则都必须在所有的 @charset 和 @import 规则之后, 并且在样式表中，位于其他任何样式声明之前。
      (10) @viewport
        用于设置视口的一些特性，不过兼容性目前不是很好，多数时候被 HTML 的 meta 代替。

    2.普通规则
      普通规则主要由选择器和声明区块构成。声明区块又由属性和值构成。
      语法的组成要点：
        普通规则
          选择器
          声明列表
            属性
            值
              值的类型
              函数
      (1)选择器
        从语法结构看，任何选择器都是由几个符号结构连接的：空格、大于号、加号、波浪线、双竖线。
          注意：空格，即后代选择器的优先级较低。
        对于每一个选择器来说，如果它不是伪元素，由几个可选的部分组成，标签类型选择器，id、class、属性和伪类，它们中只要出现一个，就构成了选择器。
        如果是伪元素，则在这个结构后追加伪元素，只有伪类可以出现在伪元素之后。
        选择器的基本意义是：根据一些特征选中元素树上的一批元素。

        选择器的结构，由简单到复杂可以分为以下几种：
          · 简单选择器: 针对某一特征判断是否选中元素
            ① 类型选择器和全体选择器
              它根据一个元素的标签名来选中元素。
                注意：实际上，还需要考虑HTML或XML元素的命名空间问题，比如：svg元素，实际上在：http://www.w3.org/2000/svg 命名空间之下
                  例：front_end\CSS\演示文件\类型选择器和全体选择器-HTML或XML元素的命名空间问题.html
              还有一个特殊的选择器 "*"，它被称为全体选择器，可以选中任意元素，它的用法和类型选择器是完全一致的。
            ② id选择器与class选择器
              id选择器和class选择器都是针对特定属性的选择器，id选择器是"#"后面跟随id名，class选择器是"."后面跟随class名。
            ③ 属性选择器
              属性选择器根据HTML元素的属性来选中元素，属性选择器有四种形态。
              ❶ [att]
                直接在方括号中放入属性名，检查元素是否具有这个属性，只要元素具有这个属性，不论属性是什么值都可以被选中。
                  例：p[title]{ color:red; }
              ❷ [att=val]
                精确匹配，检查一个元素属性的值是否为val。
                  例：span[class="col"]{ font-size:10px; }
              ❸ [att~=val]
                多种匹配，检查一个元素的值是否是若干值之一，这里的val不是一个单一的值，可以是用空格分隔的一个序列。
                  例：p[class="col tool_div"]{ border-radius: 1px; }
              ❹ [att|=val]
                选取属性值为“val”或是以“val-”为前缀（"-"为连字符，Unicode编码为U+002D）开头，val必须是整个单词。典型的应用场景是用来来匹配语言简写代码（如zh-CN，zh-TW可以用zh作为value）。
                有些HTML属性含有特殊字符，这个时候，可以把val用引号括起来，形成一个CSS字符串。CSS字符串允许使用单双引号来规避特殊字符，也可以使用反斜杠转义。
              ❺ [att^=val]
                匹配属性值以指定值开头的元素。
              ❻ [att$=val]
                匹配数值以指定值结束的元素。
              ❼ [att*=val]
                匹配属性值包含指定值的每个元素，只需要有val，不需要是整个单词。
                  例：div[class*="test"] { background:#ffff00; }
            ④ 伪类选择器
              伪类选择器是一系列由CSS规定好的选择器，它们以冒号开头。伪类选择器有普通型和函数型两种。
              伪类选择器是很大的一类选择器，它是选择器能力的一种补充
              。在实际使用中，尽量通过合适的id和class来标识元素，约束伪类的使用。最好只在不得不使用伪类的场景使用伪类，这对CSS代码的性能和可读性都有好处。
              ❶ 树结构关系伪类选择器
                · :root: 表示树的根元素，在选择器是针对完整的HTML文档情况下，一般用HTML标签即可选中根元素。但是随着 scoped css 和 shadow root等场景出现，选择器可以针对某一子树来选择，这时候就很需要root伪类。
                · :empty: 表示没有子节点的元素，这里有个例外就是 子节点为空白文本节点的情况。
                · :nth-child: 这是个函数型的伪类，匹配父元素中的第 n 个子元素，元素类型没有限制。用的是CSS的An+B语法，An+B语法设计的比较复杂
                  例：:nth-child(1){ color:#0F0; }    :nth-child(4n-1); // 选中第3个，第7个这样符合4的倍数减1的数字
                      :nth-child(odd){ background-color:#00F; } // 使用odd关键字匹配奇数节点，even匹配偶数节点
                · :nth-last-child: 与:nth-child 的区别仅仅是从后往前数。
                · :first-child, :last-child: 分别表示第一个和最后一个元素
                · :only-child: 匹配属于父元素中唯一子元素的元素。
                · of-type系列伪类: 匹配同类型中的第n个同级兄弟元素。有 nth-of-type、nth-last-of-type、first-of-type、last-of-type、only-of-type。
              ❷ 链接与行为伪类选择器
                · :any-link: 表示任意的链接，包括 a、area和link标签都可能匹配到这个伪类。
                · :line: 表示未访问过的链接。
                · :visited: 表示已访问过的链接。
                · :hover: 表示鼠标悬停在上的元素。
                · :active: 表示用户正在激活元素。如：用户按下按钮，鼠标还未抬起时，这个按钮就处于激活状态。
                · :focus: 表示焦点在这个元素上。
                · :target: 用于选取当前活动的目标元素。URL 带有后面跟有锚名称 #，指向文档内某个具体的元素。这个被链接的元素就是目标元素(target element)。
              ❸ 逻辑伪类选择器
                · :not(selector): 这是个函数型伪类。匹配非指定元素/选择器的所有元素。
            ⑤ 伪元素选择器
              伪元素的语法跟伪类相似，但是实际产生的效果却是把不存在的元素选出来。
              目前兼容性达到可用的伪元素有以下几种：
                · ::first-line: 表示元素的第一行。这里的第一行指的是排版后显示的第一行，与HTML代码中的换行无关。这个伪元素选择器必须出现在最内层的块级元素之内。CSS标准规定了这个选择器必须出现在最内层的块级元素内。
                · ::first-letter: 表示元素的第一个字母。位置在所有标签之内。
                  注意：CSS标准只要求::first-line、::first-letter实现有限的几个CSS属性，都是跟文本相关。 文档：front_end\HTML\first-line,first-letter伪元素选择器可以使用的属性.png
                · ::before: 表示在元素内容之前插入一个虚拟的元素。
                · ::after: 表示在元素内容之后插入一个虚拟的元素。
                  注意：以上两个伪元素所在的CSS规则必须指定content属性才生效。content属性还支持counter。
                    例：front_end\CSS\演示文件\before和after.html
                  :before 和 ::after 中支持所有的 CSS 属性。实际开发中，这两个伪元素非常有用，有了这两个伪元素，一些修饰性元素，可以使用纯粹的 CSS 代码添加进去，这能够很好地保持 HTML 代码中的语义，既完成了显示效果，又不会让 DOM 中出现很多无语义的空元素。
          · 复合选择器: 连续写在一起的简单选择器，针对元素自身特征选择单个元素。
          · 复杂选择器: 由"空格"、">"、"~"、"+"、"||"等符号连接的复合选择器，根据父元素或者前序元素检查单个元素。
            · "空格": 后代，表示选中所有符合条件的后代节点。
            · ">": 子代，表示选中所有符合条件的子节点。
            · "~": 后继，表示选中所有符合条件的后继节点，后继节点即跟当前节点具有同一个父元素，并出现在它之后的兄弟节点。
            · "+": 直接后继，表示选中符合条件的直接后继节点，直接后继节点即 下一个节点。
            · "||": 列选择器，表示选中对应列中符合条件的单元格。
            空格和子代选择器可以用于组件化场景，当组件是独立开发时，很难完全避免重名的情况，如果为组件的最外层容器设置一个特别的class名，生成CSS规则时，则全部使用后代或子代选择器，可以有效避免CSS规则的命名污染问题。
          · 选择器列表: 由逗号分隔的复杂选择器，表示"或"的关系
          
        选择器的优先级
          CSS选择器是基于规则生效的，同一个元素命中多条规则是非常常见的，不同规则指定同一个属性为不同值时，就需要一个机制来解决冲突。
          CSS标准用一个三元组(a,b,c)来构成一个复杂选择器的优先级。
           · id选择器的数目记为a
           · 伪类选择器和class选择器的数目记为b
           · 伪元素选择器和标签选择器的数目记为c
           · "*"不影响优先级
          CSS标准建议用一个足够大的进制，获取"a-b-c"来表示选择器优先级，即：
            specificity = base * base * a + base * b + c; // 采用的是65536进制
          行内属性的优先级用于高于CSS规则，浏览器提供了一个"口子"，就是在选择器CSS样式后上加"!important"。这个用法非常危险，因为它相当于一个新的优先级，而且优先级会高于行内属性。
          同一优先级的选择器遵循"后面覆盖前面的"原则。

      (2)声明：属性和值
        声明部分是一个由 "属性:值" 组成的序列。
        ① 属性
          属性：是由中划线、下划线、字母、数字等组成的标识符，CSS还支持使用反斜杠转义。
            注意：属性不允许使用连续两个的中划线开头，这样的属性会被认为是CSS变量。
          以双中划线开头的属性被当做变量，与之配合的则是var函数：
            例：front_end\CSS\演示文件\qualified_rule.css 行1
        ② 值
          值的部分，根据每个CSS属性可以取到不同的值，这里的值可能是以下类型：
            · CSS范围的关键字: initial、unset、inherit，任何属性都可以的关键字
            · 字符串: 比如 content 属性。
            · URL: 使用url()函数的URL值。
            · 整数/实数: 比如 flex 属性。
            · 维度: 带单位的整数/实数，比如 width 属性。
            · 百分比: 大部分维度都支持。
            · 颜色: 比如 background-color 属性。
            · 图片: 比如 background-image 属性。
            · 2D位置: 比如 background-position 属性。
            · 函数: 来自函数的值，比如 transform 属性，一些属性会要求产生函数类型的值，比如 easing-function 会要求 cubic-bezier() 函数的值。
          CSS支持一批特定的计算型函数：
            · calc(): 是基本的表达式计算，支持加减乘除四则运算，在针对维度进行计算时，calc()函数允许不同单位混合运算，非常有用。
              例：front_end\CSS\演示文件\qualified_rule.css 行9
            · max(): 从一个逗号分隔的表示式列表中取最大的值作为属性值。
              例：width: max(10vm, 4em, 80px);
            · min(): 从一个逗号分隔符表达式列表中选择一个最小值作为CSS的属性值。
              例：width: min(1vm, 4em, 80px);
            · clamp(): 给一个值限定一个范围，超出范围则使用范围的最大值，最小值
              例：font-size: clamp(1.5rem, 2.5vm, 4rem);
            · toggle(): 在规则选中多于一个元素时生效，它会在几个值之间按顺序切换，比如让一个列表项的样式圆点和方点间隔出现，可以使用以下代码：
              例：ul { list-style-type: toggle(circle, square); }
            · attr(): 用来获取被选中元素的属性值，并且在样式文件中使用。它也可以被用在伪类元素里，在伪类元素里使用，它得到的是伪元素的原始元素的值。
              
  二.CSS排版
    1.正常流
      (1)正常流的行为
        可以用一句话来描述正常流的行为：依次排列，排不下换行。
        理解了正常流的基本概念，剩下的功能只需要在它的基础上延伸。在正常流的基础上，有float相关规则，