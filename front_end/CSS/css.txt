CSS 层叠样式表
  CSS的顶层样式表由两种规则组成的规则列表构成，一种被称为at-rule，就是at规则，另一种是 qualified rule 普通规则。
  一.CSS语法
    1.at-rule at规则
      at-rule 由一个@关键字和后续的一个区块组成，如果没有区块，则以分号结束。这些 at-rule 在开发中使用的机会远远小于普通规则。
      (1) @charset
        用于提示CSS文件使用的字符编码方式，它如果被使用，必须出现在最前面，这个规则只在给出语法解析阶段前使用，并不影响页面上的展示效果。
          例：@charset "utf-8";
      (2) @import
        用于引入一个CSS文件，除了@charset规则不会引入，@import可以引入另一个文件的全部内容。
          例：@import "base.css";  @import url("base.css");
      (3) @media
        是有名的 media query 使用的规则，它能够对设备的类型进行一些判断。针对不同的屏幕尺寸设置不同的样式，适用于设计响应式页面。在media的区块内，就是普通规则。
          例：@media screen and (max-width:600px) { body { background-color:pink;} } /*如果屏幕宽度小于600px则修改背景色*/
      (4) @page
        用于分页媒体访问网页时的表现设置，页面是一种特殊的盒模型结构，除了页面本身，还可以设置它周围的盒。
          例: front_end\CSS\演示文件\at_rule.css 行10
      (5) @counter-style
        产生一种数据，用于定义列表项的表现。
          例：front_end\CSS\演示文件\at_rule.css 行25
      (6) @key-frames
        产生一种数据，定义动画关键帧。
          例：front_end\CSS\演示文件\at_rule.css 行34
      (7) @fontface
        用于定义一种字体，icon font 技术就是利用这个特性实现的。
          例：front_end\CSS\演示文件\at_rule.css 行46
      (8) @support
        检查环境的特性，它与 media 比较类似。
          例：front_end\CSS\演示文件\at_rule.css 行54
      (9) @namespace
        用来定义使用在CSS样式表中的XML命名空间的@规则。定义的命名空间可以把通配、元素和属性选择器限制在指定命名空间里的元素。
        @namespace规则通常在处理包含多个namespaces的文档时才有用，比如HTML5里内联的SVG、MathML或者混合多个词汇表的XML。
          例：front_end\CSS\演示文件\at_rule.css 行67
          注意：任何 @namespace 规则都必须在所有的 @charset 和 @import 规则之后, 并且在样式表中，位于其他任何样式声明之前。
      (10) @viewport
        用于设置视口的一些特性，不过兼容性目前不是很好，多数时候被 HTML 的 meta 代替。

    2.普通规则
      普通规则主要由选择器和声明区块构成。声明区块又由属性和值构成。
      语法的组成要点：
        普通规则
          选择器
          声明列表
            属性
            值
              值的类型
              函数
      (1)选择器
        从语法结构看，任何选择器都是由几个符号结构连接的：空格、大于号、加号、波浪线、双竖线。
          注意：空格，即后代选择器的优先级较低。
        对于每一个选择器来说，如果它不是伪元素，由几个可选的部分组成，标签类型选择器，id、class、属性和伪类，它们中只要出现一个，就构成了选择器。
        如果是伪元素，则在这个结构后追加伪元素，只有伪类可以出现在伪元素之后。
        选择器的基本意义是：根据一些特征选中元素树上的一批元素。
        选择器的结构，由简单到复杂可以分为以下几种：
          · 简单选择器: 针对某一特征判断是否选中元素
          · 复合选择器: 连续写在一起的简单选择器，针对元素自身特征选择单个元素
          · 复杂选择器: 由"空格"、">"、"~"、"+"、"||"等符号连接的复合选择器，根据父元素或者前序元素检查单个元素。
          · 选择器列表: 由逗号分隔的复杂选择器，表示"或"的关系
          
      (2)声明：属性和值
        声明部分是一个由 "属性:值" 组成的序列。
        ① 属性
          属性：是由中划线、下划线、字母、数字等组成的标识符，CSS还支持使用反斜杠转义。
            注意：属性不允许使用连续两个的中划线开头，这样的属性会被认为是CSS变量。
          以双中划线开头的属性被当做变量，与之配合的则是var函数：
            例：front_end\CSS\演示文件\qualified_rule.css 行1
        ② 值
          值的部分，根据每个CSS属性可以取到不同的值，这里的值可能是以下类型：
            · CSS范围的关键字: initial、unset、inherit，任何属性都可以的关键字
            · 字符串: 比如 content 属性。
            · URL: 使用url()函数的URL值。
            · 整数/实数: 比如 flex 属性。
            · 维度: 带单位的整数/实数，比如 width 属性。
            · 百分比: 大部分维度都支持。
            · 颜色: 比如 background-color 属性。
            · 图片: 比如 background-image 属性。
            · 2D位置: 比如 background-position 属性。
            · 函数: 来自函数的值，比如 transform 属性，一些属性会要求产生函数类型的值，比如 easing-function 会要求 cubic-bezier() 函数的值。
          CSS支持一批特定的计算型函数：
            · calc(): 是基本的表达式计算，支持加减乘除四则运算，在针对维度进行计算时，calc()函数允许不同单位混合运算，非常有用。
              例：front_end\CSS\演示文件\qualified_rule.css 行9
            · max(): 从一个逗号分隔的表示式列表中取最大的值作为属性值。
              例：width: max(10vm, 4em, 80px);
            · min(): 从一个逗号分隔符表达式列表中选择一个最小值作为CSS的属性值。
              例：width: min(1vm, 4em, 80px);
            · clamp(): 给一个值限定一个范围，超出范围则使用范围的最大值，最小值
              例：font-size: clamp(1.5rem, 2.5vm, 4rem);
            · toggle(): 在规则选中多于一个元素时生效，它会在几个值之间按顺序切换，比如让一个列表项的样式圆点和方点间隔出现，可以使用以下代码：
              例：ul { list-style-type: toggle(circle, square); }
            · attr(): 用来获取被选中元素的属性值，并且在样式文件中使用。它也可以被用在伪类元素里，在伪类元素里使用，它得到的是伪元素的原始元素的值。
              