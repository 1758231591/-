HTML
  一.语义类标签
    是什么？
      语义就是说话表达的意思，多数的语义实际上是由文字来承载的。语义类标签则是纯文字的补充，比如：标题、自然段、章节、列表，这些内容都是纯文字无法表达的，需要语义类标签代为表达。
      语义类标签的特点是视觉表现上互相都差不多，主要的区别在于它们表达了不同的语义，比如：section、nav、p等。
    使用的好处
      · 语义类标签对开发者更为友好，使用语义类标签增强了可读性，即便实在没有CSS的时候，也能清晰的看出网页的结构，也更便于团队的开发和维护。
      · 语义类标签十分适合机器阅读。它的文字表现力丰富，更适合搜索引擎检索（SEO），也可以搜索引擎爬虫更好地获取更多有效信息，有效提升网页的搜索量，并且语义类还可以支持读屏软件，根据文章可以自动生成目录等。
      不过，错误地使用语义标签，会给机器阅读造成混淆、增加嵌套，给CSS编写加重负担。
    使用场景
      1.自然语言和纯文本的补充，用来 表达一定的结构 或 消除歧义
        (1)表达一定的结构
          在日语中，有一个语法现象叫做：ルビ，它的读音是 ruby（著名的ruby语言就是据此命名的），它的中文意思类似于注音或意思的注解。
          在HTML5中，就引入了ruby标签，它由ruby、rt、rp三个标签来实现。
        (2)消除歧义
          一句话放到不同的上下文，可能表达不同的意思。
          当没有上下文时，如何消除歧义？需要用到 em 标签。em表示重音。
      2.文章标题摘要
        文章的结构，小说中有“部-章”的概念。HTML语义标签中，有不少是用于支持这样的结构的标签。
        语义化的HTML能够支持自动生成目录结构，HTML标准中专门规定了生成目录结构的算法。
        一篇文章会有一个树形的目录结构，它由各个级别的标题组成。这个树形结构可能不会跟HTML元素的嵌套关系一致。
        在HTML5中，有 section 标签，这个标签不仅仅是一个“有语义的div”，它会改变h1-h6的语义。section 的嵌套会使其中的h1-h6下降一级，因此，在HTML5以后，只需要 section 和 h1 就足以形成文档的树形结构。
          例子：front_end\HTML\演示文件\语义类标签.html
      3.适合机器阅读的整体结构
        越来越多的浏览器推出“阅读模式”，以及各种非浏览器终端的出现，语义化的HTML适合机器阅读的特性变得越来越重要。
        应用了语义化结构的页面，可以明确的提示出页面信息的主次关系，它能让浏览器很好的支持“阅读视图功能”，还可以让搜索引擎的命中率提升，同时，它也对视障用户的读屏软件更友好。
        正确使用整体结构类的语义标签，可以让页面对机器更友好。
        语义标签：
          · nav: 定义导航链接的部分，可以在不同设备上（手机或PC）可以制定导航链接是否显示，以适应不同屏幕的需求。
          · ol: 定义了一个有序列表，列表排序以数字来显示，使用<li>标签来定义列表选项。
          · ul: 定义了无序列表，也用<li>标签来创建无序列表。
            注意：ol 和 ul 的区分是内容是否有顺序关系，每一项的前面不论是数字还是点，都不会影响语义的判断。所以，不要因为视觉表现效果，而改变语义的使用。
          · section: 定义文档中的节。比如：章节、页眉、页脚或文档中的其他部分，元素的嵌套会使其中的h1-h6下降一级，因此，在HTML5以后，只需要，只需要 section 和 h1-h6 就足以形成文档的树形结构。
          · article: 表示具有一定独立性质的文章。所以，article 和 body 具有相似的结构，同时，一个HTML页面中，可以有多个article存在，适合多篇新闻展示在同一个新闻专题页面、用户评论。
          · header: 通常出现在前部，表示导航或者介绍性的内容
          · footer: 通常出现在尾部，包含一些作者信息、相关链接、版权信息等
            注意：header 和 footer 一般放在 <article> 或者 <body> 的直接子元素，但是标准中并没有明确规定，footer也可以和aside、nav、section 相关联（header不存在关联问题）
          · aside: 表示跟文章主体不相关的部分，它可能包含导航、广告等工具性质的内容
            注意：aside 和 header 中都可能出现导航（<nav>标签），两者的区别是，<header>中的导航多数是到文章自己的目录，而 <aside> 中的导航多数是到关联页面或者整站地图。
          · address: 定义文档或文章的作者/拥有者的联系信息，文本通常呈现斜体。如果元素位于body内，则它表示文档联系信息。元素位于 <article> 元素内，则表示文章的联系信息。大多数浏览器会在前后添加折行。元素不应该用于描述通信地址，除非它是联系信息的一部分。通常连同其他信息被包含在 footer 元素中。address明确地只关联到 article 和 body。
          · abbr: 表示简称或缩写，比如：“WWW”，通过对缩写进行标记，能够为浏览器、拼写检查和搜索引擎提供有用的信息。
          · hr: 表示故事走向的转变或话题的转变，在文档中创建一条水平线。
          · p: 定义段落，元素会自动在其前后创建一些空白。
          · em: 把其中的文本表示为强调的内容，用斜体来显示。
          · strong: 这个标签跟 em 标签一样，用于强调文本，但它的强调程度更强一些，用粗体来显示。
          · dfn: 一个短语标签，用来包裹被定义的名词。
          · pre: 定义预格式化的文本。被包围在元素中的文本通常会保留空格和换行符，文本呈现为等宽字体。常用于表示计算机的源代码。
            注意：可以导致段落断开的标签（例如：标题、<p> 和 <address>标签）绝不能包含在<pre>所定义的块里。
          · samp: 定义计算机程序的样本文本。
          · code: 是一个短语标签，用来定义计算机代码文本。
          · cite: 通常表示它所包含的文本对某个参考文献的引用，比如：书籍的标题。引用的文本用斜体来显示。
          · blockquote: 表示块级引用。
          · q: 表示短的引用，通常会在引用的内容周围添加引号。
          · figure: 规定具有一定  自包含性的内容（如：图片、代码、表格等），其内容应该与主内  容相关，同时元素的  位置相对于主内容是独立的，如果删除，则不应对文档流产生影响。  
          · figcaption: 为 figure元素 定义标题，应被置于figure元素的第一个或最后一个元素的位置。
              例子：front_end\HTML\演示文件\语义类标签.html
          