HTML 超文本标记语言
  一.语义类标签
    是什么？
      语义就是说话表达的意思，多数的语义实际上是由文字来承载的。语义类标签则是纯文字的补充，比如：标题、自然段、章节、列表，这些内容都是纯文字无法表达的，需要语义类标签代为表达。
      语义类标签的特点是视觉表现上互相都差不多，主要的区别在于它们表达了不同的语义，比如：section、nav、p等。
    使用的好处
      · 语义类标签对开发者更为友好，使用语义类标签增强了可读性，即便是在没有CSS的时候，也能清晰的看出网页的结构，也更便于团队的开发和维护。
      · 语义类标签十分适合机器阅读。它的文字表现力丰富，更适合搜索引擎检索（SEO），也可以使搜索引擎爬虫更好地获取更多有效信息，有效提升网页的搜索量，并且语义类还可以支持读屏软件，根据文章可以自动生成目录等。
        注意：错误地使用语义标签，会给机器阅读造成混淆、增加嵌套，给CSS编写加重负担等问题。
    使用场景
      1.自然语言和纯文本的补充，用来 表达一定的结构 或 消除歧义
        (1)表达一定的结构
          在日语中，有一个语法现象叫做：ルビ，它的读音是 ruby（著名的ruby语言就是据此命名的），它的中文意思类似于注音或意思的注解。
          在HTML5中，就引入了ruby标签，它由ruby、rt、rp三个标签来实现。
            例：front_end\HTML\演示文件\语义类标签.html 行13
        (2)消除歧义
          一句话放到不同的上下文，可能表达不同的意思。
          当没有上下文时，如何消除歧义？需要用到 em 标签。em表示重音。
      2.文章标题摘要
        文章的结构，小说中有“部-章”的概念。HTML语义标签中，有不少是用于支持这样的结构的标签。
        语义化的HTML能够支持自动生成目录结构，HTML标准中专门规定了生成目录结构的算法。
        一篇文章会有一个树形的目录结构，它由各个级别的标题组成。这个树形结构可能不会跟HTML元素的嵌套关系一致。
        在HTML5中，有 section 标签，这个标签不仅仅是一个“有语义的div”，它会改变h1-h6的语义。section 的嵌套会使其中的h1-h6下降一级，因此，在HTML5以后，只需要 section 和 h1 就足以形成文档的树形结构。
          例：front_end\HTML\演示文件\语义类标签.html 行20
      3.适合机器阅读的整体结构
        越来越多的浏览器推出“阅读模式”，以及各种非浏览器终端的出现，语义化的HTML适合机器阅读的特性变得越来越重要。
        应用了语义化结构的页面，可以明确的提示出页面信息的主次关系，它能让浏览器很好的支持“阅读视图功能”，还可以让搜索引擎的命中率提升，同时，它也对视障用户的读屏软件更友好。
        正确使用整体结构类的语义标签，可以让页面对机器更友好。
        语义标签：
          · nav: 定义导航链接的部分，可以在不同设备上（手机或PC）可以制定导航链接是否显示，以适应不同屏幕的需求。
          · ol: 定义了一个有序列表，列表排序以数字来显示，使用<li>标签来定义列表选项。
          · ul: 定义了一个无序列表，也用<li>标签来创建无序列表。
            注意：ol 和 ul 的区分是内容是否有顺序关系，每一项的前面不论是数字还是点，都不会影响语义的判断。所以，不要因为视觉表现效果，而改变语义的使用。
          · section: 定义文档中的节。比如：章节、页眉、页脚或文档中的其他部分，元素的嵌套会使其中的h1-h6下降一级，因此，在HTML5以后，只需要 section 和 h1-h6 就足以形成文档的树形结构。
          · article: 表示具有一定独立性质的文章。所以，article 和 body 具有相似的结构，同时，一个HTML页面中，可以有多个article存在，适合多篇新闻展示在同一个新闻专题页面、用户评论。
          · header: 通常出现在前部，表示导航或者介绍性的内容。
          · footer: 通常出现在尾部，包含一些作者信息、相关链接、版权信息等。
            注意：header 和 footer 一般放在 <article> 或者 <body> 的直接子元素，但是标准中并没有明确规定，footer也可以和aside、nav、section 相关联（header不存在关联问题）
          · aside: 表示跟文章主体不相关的部分，它可能包含导航、广告等工具性质的内容。
            注意：aside 和 header 中都可能出现导航（<nav>标签），两者的区别是，<header>中的导航多数是到文章自己的目录，而 <aside> 中的导航多数是到关联页面或者整站地图。
          · address: 定义文档或文章的作者/拥有者的联系信息，文本通常呈现斜体。如果元素位于body内，则它表示文档联系信息。元素位于 <article> 元素内，则表示文章的联系信息。大多数浏览器会在前后添加折行。元素不应该用于描述通信地址，除非它是联系信息的一部分。通常连同其他信息被包含在 footer 元素中。address明确地只关联到 article 和 body。
          · abbr: 表示简称或缩写，比如：“WWW”，通过对缩写进行标记，能够为浏览器、拼写检查和搜索引擎提供有用的信息。
          · hr: 表示故事走向的转变或话题的转变，在文档中创建一条水平线。
          · p: 定义段落，元素会自动在其前后创建一些空白。
          · em: 把其中的文本表示为强调的内容，用斜体来显示。
          · strong: 这个标签跟 em 标签一样，用于强调文本，但它的强调程度更强一些，用粗体来显示。
          · dfn: 一个短语标签，用来包裹被定义的名词。
          · pre: 定义预格式化的文本。被包围在元素中的文本通常会保留空格和换行符，文本呈现为等宽字体。常用于表示计算机的源代码。
            注意：可以导致段落断开的标签（例如：标题、<p> 和 <address>标签）绝不能包含在<pre>所定义的块里。
          · samp: 定义计算机程序的样本文本。
          · code: 是一个短语标签，用来定义计算机代码文本。
          · cite: 通常表示它所包含的文本对某个参考文献的引用，比如：书籍的标题。引用的文本用斜体来显示。
          · blockquote: 表示块级引用。
          · q: 表示短的引用，通常会在引用的内容周围添加引号。
          · figure: 规定具有 一定自包含性的内容（如：图片、代码、表格等），其内容应该与主内容相关，同时元素的位置相对于主内容是独立的，如果删除，则不应对文档流产生影响。  
          · figcaption: 为 figure元素 定义标题，应被置于figure元素的第一个或最后一个元素的位置。
              例：front_end\HTML\演示文件\语义类标签.html 行35
          
  二.元信息类标签
    是什么？
      所谓元信息，是指描述自身的信息，元信息类标签，就是HTML用于描述文档自身的一类标签，它们通常出现在 head 标签中，一般不会在页面被显示出来。
      元信息多数情况下是给浏览器、搜索引擎等机器阅读的，有时候这些信息会在页面之外显示给用户。
    元信息类标签：
      1.head 标签
        head 标签本身不携带任何信息，它主要是作为盛放其它语义类标签的容器使用。
        head 标签规定了自身必须是 html 标签中的第一个标签，它的内容必须包含一个title，并且最多只能包含一个base。如果文档作为iframe，或者有其他方式指定了文档标题时，可以允许不包含title标签。
      2.title 标签
        title 标签表示文档的标题。title 应该是完整地概括整个网页的内容的。
          例：<title>This is title</title>
      3.base 标签
        base 标签实际上是个历史遗留标签。它的作用是给页面上所有的 URL 相对地址提供一个基础。base 标签最多只有一个，它改变全局的链接地址。
          注意：它是一个非常危险的标签，容易造成跟 JS 的配合问题，所以在实际开发中，建议使用 JS 来代替 base 标签。
      4.meta 标签
        meta 标签是一组键值对，它是一种通用的元信息表示标签。
        在head中可以出现任意多个 meta 标签。一般的 meta 标签由 name 和 content 两个属性来定义。name表示元信息的名称，content表示元信息的值。
        基本用法如下：
          <meta name=application-name content="value">
        这里的 name 是一种比较自由的约定，HTTP标准规定了一些 name 作为公用的，也鼓励使用自己创造的name。
        除了基本用法，meta标签还有一些变体，主要用于简化书写方式或者声明自动化行为，主要如下：
          ① 具有 charset 属性的 meta
            从HTML5开始，为了简化写写法，meta标签新增了 charset 属性。添加了 charset 属性的 meta 标签无需再有 name 和 content。
              例：<meat charset="UTF-8">
            charset型meta标签非常关键，它描述了HTML文档自身的编码形式。建议放到 head 的第一个。
            浏览器在读到这个标签前，处理的所有字符都是ASCII字符，ASCII字符是UTF-8和绝大多数字符集编码的子集，所以，在读到meta之前，浏览器理解文档大多数都不会出错，这样可以最大程度的保证不出乱码。
            一般情况下，HTTP服务端会通过http头来指定正确的编码方式，但是有些特殊情况需要使用file协议打开一个HTML文件，则没有http头，这种时候，charset meta就非常重要。
          ② 具有http-equiv属性的 meta
            具有 http-equiv 属性的 meta 标签，表示执行一个命令。这样的 meta 标签可以不需要name属性。
              例：<meta http-equiv="content-type" content="text/html; charset=UTF-8;">  // 相当于添加了 content-type 这个http头，并且指定了 http 编码方式。
            除了content-type，还有以下几种命令：
              · default-style: 指定默认样式表
                例：<meta http-equiv="default-style" content="the document's preferred stylesheet">、
                  注意：上面 content 属性的值必须匹配同一文档中的一个 link 元素上的 title 属性的值，或者必须匹配同一文档中的一个 style 元素上的 title 属性的值。
              · refresh: 如果 content 只包含一个正整数，则为重新载入页面的时间间隔(秒)；如果content包含一个正整数，并且后面跟着字符串";href="和一个合法的URL，则是重定向到指定链接的时间间隔(秒)。
                例：<meta http-equiv="refresh" content="3;href=https://www.baidu.com"> // 3秒后重定向到百度
              · set-cookie: 模拟http头 set-cookie，设置cookie
                例：＜meta http-equiv="Set-Cookie" content="cookieValue=xxx;expires=Wednesday, 20-Jun-2007 22:33:00 GMT； path=/"＞
                  注意：过期时间必须使用GMT的时间格式
              · x-ua-compatible: 模拟http头 x-ua-compatible，声明ua兼容性
                例：<meta http-equiv="X-UA-Compatible" content="IE=edge"/> // ie浏览器将执行当前支持的最高版本，大小写不敏感
                  还有特殊写法：<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/> // 安装了 Google Chrome Frame （谷歌浏览器內嵌框架）则使用谷歌浏览器内核模式，否则使用最新的IE模式
              · content-security-policy: 模拟http头 content-security-policy，声明内容安全策略。内容策略主要指定允许的服务器源和脚本端点，这有助于防止跨站点攻击脚本攻击。
                例：<meta http-equiv="Content-Security-Policy" content="default-src https:"> // 禁用不安全的内联，仅允许通过https加载资源
          ③ name为viewport的meta
            meta可以被自由定义，只要写入和读取的双方约定好 name 和 content 的格式就行。
            name为viewport的meta，它没有在HTML标准中定义，却是移动端开发的事实标准。它的 content 是一个用逗号分隔的键值对。
              例：<meta name="viewport" content="width:500, initial-scale=1"> // 页面宽度为500，初始缩放比例为1
            它能表示的全部属性如下：
              · width: 页面宽度，可以取值具体的数字，也可以是 device-width，表示跟设备宽度相等。
              · height: 页面高度，可以取值具体的数字，也可以是 device-height，表示跟设置高度相等。
              · initial-scale: 初始缩放比例
              · minimum-scale: 最小缩放比例
              · maximum-scale: 最大缩放比例
              · user-scale: 是否允许用户缩放
            一个标准的viewport meat，如下：
              例：<meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scale=no" >
          ④ 其他预定义的 meta
            · application-name: 如果页面是 Web application，用这个标签表示应用名称
            · author: 页面作者
              例：<meta name="author" content="DSY">
            · description: 页面描述，这个属性可以被用于搜索引擎
            · generator: 生成页面所使用的工具，主要用于可视化编辑器。如果是手写HTML的网页，不需要加这个 meta
              例：<meat name="generator" content="VSCode1.50.1" >
            · keywords: 规定一个逗号分隔的关键词列表，对于SEO非常重要
              例： <meta name="keywords" content="HTML, meta tag, tag reference">
            · referrer: 主要用于控制网页发送给服务器的referrer信息，可以告诉服务器端用户是从哪个页面来到当前网页的
              例：<meat name="referrer" content="no-referrer" >
              referrer的content常用属性值：
                · no-referrer: 任何情况下都不发送Referrer信息
                · no-referrer-when-downgrade: 仅当协议降级（如从HTTPS页面跳转到HTTP页面）时不发送Referrer信息。是大部分浏览器默认策略
                · origin: 发送只包含host部分的referrer信息，也就是只包含了协议和域名的url，不包含域名后面部分，比如，来源网页url是https://www.liudaima.com/1.html，但referrer值只包含https://www.liudaima.com；
                · origin-when-cross-origin: 仅在发生跨域访问时，发送只包含host的Referrer信息，但在同域下还是完整的，而只有协议、域名和端口都一致时，浏览器才认为是同域。
                · unsafe-url: 全部都发送Referrer信息，是最宽松，也是最不安全的策略
            · theme-color: 页面风格颜色，实际并不会影响页面，但是浏览器可能据此调整页面之外的 UI（如窗口边框或者 tab 的颜色）
              例：<meta name="theme-color" content="#2932e1">

  三.链接
    链接是HTML中的一种机制，它是HTML文档和其他文档或者资源的连接关系，在HTML中，链接有两种类型，一种是超链接型标签，另一种是外部资源标签。
    1. link标签
      link标签会生成一个链接，有以下两种情况：
        · 超链接: 这些超链接不会像a标签那样显示在网页中，这意味着多数浏览器中，这些link标签不会起任何作用。但是，这些link标签能够被搜索引擎和一些浏览器插件识别，从而产生关键作用。
          例：到页面 RSS 的 link 标签，能够被浏览器的 RSS 订阅插件识别，提示用户当前页面是可以 RSS 订阅的。
        · 外部资源链接: 会把外部资源链接到文档中，会实际下载这些资源，并且作出一些处理，如：link标签引入样式表。
      link标签的链接类型主要通过 rel 属性来区分，有以下几种：
        (1)超链接类link标签
          超链接link标签是一种被动型链接，在用户不操作的情况下，它们不会被主动下载。
          ① canonical型link: 这个标签提示页面它的主URL，在网站中常常有多个URL指向同一页面的情况，搜索引擎访问这类页面时会去掉重复的页面，这个link会提示搜索引擎保留哪一个URL。
            例：<link rel="canonical" href="...">
          ② alternate型link: 这个标签提示页面它的变形形式，这个所谓的变形可能是当前页面的不同格式、不同语言或不同设备设计的版本，这种 link 通常也是提供给搜索引擎使用。
            例：front_end\HTML\演示文件\alternate型link标签.html
          ③ prev型link 和 next型link: 在互联网应用中，很多网页都属于一个序列，比如分页浏览的场景，或者图片展示的场景，每个网页是序列中的一个项。这种时候，就适合使用 prev 和 next 型的 link 标签，来告诉搜索引擎或者浏览器它的前一项和后一项，这有助于页面的批量展示。因为 next 型 link 告诉浏览器“这是很可能访问的下一个页面”，HTML 标准还建议对 next 型 link 做预处理。
            例：<link rel="prev" href="http://www.example.com/page-2.html">  <link rel="next" href="http://www.example.com/page-4.html">
          ④ 其他超链接类的 link
            其他超链接类link标签都表示一个跟当前文档相关联的信息，可以把这样的link标签视为一种带链接功能的meta标签。
            · rel="author": 链接到本页面的作者，一般是mailto协议
            · rel="help": 链接到本页面的帮助页
            · rel="license": 链接到本页面的版权信息页
            · rel="search": 链接到本页面的搜索页面（一般是站内提供搜索时使用）
        (2)外部资源类link标签
          外部资源型link标签会被主动下载，并且根据 rel 类型作不同处理。
          ① icon型link
            这类链接表示页面的icon。多数浏览器会读取icon型link，并且把页面的icon展示出来。
            icon型link是唯一一个外部资源类的元信息link，其他元信息link都是超链接，这意味着，icon型link中的图标地址默认会被浏览器下载和使用。
            如果没有指定这样的link，多数浏览器会使用域名根目录下的 favicon.ico，即使它不存在，所以从性能的角度考虑，建议一定要保证页面中有icon型的link。
            只有icon型link有有效的sizes属性，HTML标准允许一个页面出现多个icon型link，并用sizes指定它适合的icon尺寸。
          ② 预处理类link
            导航到一个网站需要经过 DNS查询、建立连接、传输数据、加载入内存、渲染等一系列的步骤。预处理类link标签就是允许控制浏览器，提前针对一些资源去做这些操作，以提高性能。
            · dns-prefetch型link: 提前对一个域名做dns查询，这样的link里面的href实际只有域名有意义。
            · preconnect型link: 提前对一个服务器建立TCP连接。
            · prefetch型link: 提前取href指定的url的内容。
            · preload型link: 提前加载href指定的内容。
            · prerender型link: 提前渲染href指定的url
          ③ modulepreload型link
            作用是预先加载一个JS的模块。这可以保证JS模块不必等到执行时才加载。这里的加载，是指完成下载并放入内存，并不会执行对应的JS。
          ④ stylesheet型link
            基本用法是从一个CSS文件创建一个样式表。这里可以没有type属性，如果有，必须是"text/css"才有效。
          ⑤ pingback型link
            表示本网页被引用时，应该使用的pingback地址，这个机制是一份独立的标准，遵守pingback协议的网页在引用本页面时，会向 pingback url 发送一个消息。常用于博客等。
              例：<link rel="pingback" href="www.f.com/xmlrpc.php" />
          
    2. a标签
      具有href的a标签会产生超链接，就是不会被主动下载的被动型链接。
      a标签也有rel属性，其中一些跟link中的相同，有以下几种：
        · alternate
        · author
        · help
        · license
        · next
        · prev
        · search
        这些跟link语义完全一致，不同的是，a标签产生的链接是会显示在实际网页中，而link标签仅仅是元信息。
      a标签独有的rel属性：
        · tag: 表示本网页所属的标签（关键字）。
        · bookmark: 到上级文章的链接。
      a标签辅助类型的rel，用于提示浏览器或搜索引擎做一些处理：
        · nofollow: 此链接不会被搜索引擎索引。
        · noopener: 此链接打开的网页无法使用 opener 来获得当前页面的窗口。
        · noreferrer: 此链接打开的网页无法使用 referrer 来获取当前页面的url。
        · opener: 打开的网页可以使用 window.opener 来访问当前页面的window对象，这是a标签的默认行为。
    
    3. area标签
      area标签与a标签非常相似，不同的是，area标签是区域型链接。area标签支持的rel跟a标签完全一致。
      area是整个HTML规则中唯一支持非矩形热区的标签，但area不支持各种曲线的路径，它的 shape 属性支持4种类型：
        · circle/circ: 圆形，coords支持3个值，分别表示中心点的x，y坐标和圆形半径r。
        · rect/rectangle: 矩形，coords支持4个值，分别表示两个对角顶点x1，y1和x2，y2。
        · poly/polygon: 多边形，coords至少包括6个值，表示多边形的各个顶点。
        · default: 指的是 整个图像区域。
      使用area注意事项：
        1. area必须跟img和map标签配合使用。area标签永远在map内部。
        2. map：定义一个客户端图像映射。图像映射（image-map）指带有可点击区域的一幅图像。必须有name和id属性，且id和name属性的值必须相同（浏览器兼容）。
        3. img：使用usemap是将图像定义为客户器端图像映射（以“#”开头），与map元素的name或id属性相关联。
        4. area没有href不起作用。
        例：front_end\HTML\演示文件\area和map标签.html

  四.替换型元素
    替换型元素是区别于链接的，另一种引入文件的方式。替换型元素是把文件的内容引入，替换掉自身位置的一类标签。
    1.script
      