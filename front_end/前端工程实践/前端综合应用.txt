前端综合应用
  一.性能
    性能优化不能只着眼于局部的代码，一切没有 分析 的性能都是耍流氓。凡是真正有价值的性能优化，必定是端到端的业务场景建立体系来考虑的。
    性能的建立可以分成以下几部分：
      · 现状评估和建立指标
      · 技术方案
      · 执行
      · 结果评估和监控
    1.现状评估和建立指标
      要想做好性能优化，正确地评估现状和建立指标是最关键的一步。指标又要考虑两个因素。一方面，什么样的性能指标能更好地评估它的体验？另一方面，对于公司来说，什么样的指标会影响业务价值？
      性能问题可以分成很多方面，最重要的几个点是：
        · 页面加载性能
        · 动画与操作性能
        · 内存、电量消耗
      这里，仅仅是对"性能"两个字的分析和解读，在对大量用户数据进行分析后，可以发现，其实这三部分中，"页面加载性能"跟用户的流失率有非常强的关联性，而用户流失率，正是公司业务非常看重的指标。
      因此，在开始阶段，性能优化的重点应该放在 页面加载性能上。一开始，使用的是"用户平均加载时间"，但是这个指标有严重的问题：
        · 当加载时间低于一定数字后，用户体感差别不大，这个时间大约是1秒
        · 少数超长时间加载的用户，会极大影响这个指标，即指标不能反应大多数用户的体验
      于是，又有了一个新的指标————秒开率，即一秒之内打开的用户占用户总量的百分比。
    2.技术方案
      以加载过程为例：
        · 从域名到IP地址，需要用到DNS协议查询
        · HTTP协议使用TCP传输的，所以会有TCP建立连接过程
        · 如果使用HTTPS，还有HTTPS交换证书
        · 每个网页还有图片等请求
      从分析和实际实际实验的结果看，网页的加载时间，不仅跟体积有关系，还跟请求数有很大关系，最后的技术方案大约可以这样划分：
        ① 缓存
          · 客户端控制的强缓存
        ② 降低请求成本
          · HTTP DNS: 由客户端控制，隔一段时间主动请求DNS获取域名IP，不走系统的DNS
          · TCP/TLS连接复用: 由服务端升级到HTTP2，尽量合并域名
        ③ 减少请求数
          · JS、CSS打包到HTML
          · 用JS控制图片异步加载和懒加载
          · 小型图片使用data-uri
        ④ 减少传输体积
          · 尽量使用SVG/gradient等代替图片
          · 根据机型和网络状况控制图片清晰度: 
          · 对低清晰度图片使用锐化提升体验
          · 设计上避免大型背景图
      这是前端优化比较重要的部分，这里涉及了前端技术、服务端、客户端、设计，所以要想做好性能优化，绝对不能限制在局部的视角，必须整个业务一起考虑，才能有良好的效果。
    3.执行
      根据公司实际情况，工程实施有不同的程度，工程水平可以从低到高分成三个阶段：
        · 纯管理：纯行政管理，是由经理用纯粹的管理手段来执行方案，比如说，作为前端团队的 Leader，可以组织会议，要求整个团队使用指定的技术方案。但是，纯行政管理有一些问题：
          ① 需要的行政资源不一定有，比如没法强制让后端团队配合前端
          ② 纯粹的管理方式，团队本身的体验并不好，也不利于团队成长，最重要的是，纯粹管理方式容易造成执行不到位。这样的执行方式多数出现在非技术岗位。
        · 制度化：制度化执行方式是用规则代替人的命令，指定责任人，通过培训、checklist、定期 review 等具体措施来保证实施。制度化执行可以极大地减轻管理工作量，一般现代互联网公司都会采用类似的方式。但是制度化执行方式还有很大成分是依靠人的主动性的，对程序员来说，还有更好的方式：自动化。
        · 自动化：自动化的方式是在一些重要的操作路径上设置规则，针对性能优化，有两个点适合做这件事：
          ① 把开发好的页面发布上线
          ② 开发好的页面 URL 投放到首页等处的链接
      现在多数公司都会采用制度化和自动化结合的执行方案。
    4.结果评估和性能
      执行完还要有一定的结果总结，才是一个完整的工程实施，而且，凡是工程实施，肯定要有一定长效机制，不能优化完了退化，这些都要求有线上监控机制。
      要想做线上监控，分两个部分：
        · 数据采集：需要发布平台或者开发工具来配合，对性能数据来说，Performance API 非常好用，它是浏览器记录的性能数据，一般来说，用统一的代码把它上传到服务器端就够用了。
        · 数据展现：数据的展现部分就比较自由了，可以用不同的数据可视化方案来展现性能数据，没有一定之规。一般的数据监控平台，会提供报警机制，对性能来说，报警需求不是特别强烈，但是也可以设置一些条件，针对秒开率特别低的网页报警。
      注意：有了监控，再配合一定制度，就可以保障整个团队产出的性能了，要注意，性能不是一个静态的事情，指标需要不断优化，技术方案还需要不断随着技术发展迭代，制度、自动化工具也需要不断改进，最终的监控平台产品也不能不做新需求，所以性能应该成为一个团队的日常工作的一部分，持续进行。

  二.工具链
    1.工具总论
      跟性能不同，工具体系并非业务结果，所以没法用简单的数据指标来衡量工具，它的结果更多程度是一种开发体验：帮助技术团队内的同学提升效率和体验。
      作为工程体系，考虑工具的时候同样要遵循基本规则：现状与指标、方案、实施、结果和监控。
    2.工具链的目标
      工具是为技术团队本身服务的工程体系，每一种工具的出现，必然都有一个非常具体的目标，比如 npm 帮助我们进行包管理，Yeoman 帮助我们初始化项目模板。但是这些目标是工具的目标，不是工具体系的目标。
      考虑到工程行为都是团队合作，所以对工具有两个重要需求：
        · 版本一致：只有整个团队的工具版本一致，至少要做到避免大版本差异，才能做到互相接手代码时，团队成员能够正确的使用工具开发。
        · 避免冲突：一些工具可能互相没有干扰，比如 Yeoman 和 gulp，有一些工具则由社区设计了配合方案，比如 webpack 和 babel，有一些工具，则存在着根本性冲突，如 gulp 和 grunt。
      这两个需求的解决方案，需要用到一个概念:
        · 工具链：工具链是一系列互相配合的工具，能够协作完成开发任务（注：工具链这个词最早是由 C/C++ 程序员引入的概念，一般包含编译、链接、调试等工具）
    3.工具链的设计
      要想设计一个工具链，首先需要整理一下，前端开发大约要做哪些事：
        · 初始化项目
        · 运行和调试
        · 测试（单元测试）
        · 发布
      那么，一个前端项目的工具链，大约就会包含这些功能。一个典型的社区项目工具链可能就类似下面这样：
        · Yeoman
        · webpack
        · ava/nyc
        · aws-cli
      但是，这显然不够，还需要一种机制，保证团队使用的工具版本一致，有两种做法：
        ① 轻量级：在项目初始化模板中定义 npm script 并且在 npm dev-dependency 中规定它的版本号。
        ② 重量级：开发一个包装工具，在命令行中不直接使用命令，而使用包装过的命令。工具链的使用者只需指定工具链名称，就不需要知道项目具体使用了哪些工具，这样只需要专注自己的需求就够了。同时，统一的命令行入口，意味着整个团队不需要互相学习工具链，就可以接手别人的项目开发。
      在稍微大一些的团队内部，往往会需要不止一种开发模式，如移动开发和桌面开发，这样，所需要的工具链也不一样，因此我们需要多条工具链。要想开发新的工具链，可以使用复制分支的方式来扩展原来的工具链。
    4.工具体系的执行
      因为工具体系服务的是团队内部成员，所以执行非常简单，同时，工具体系的入口是初始化项目，所以只要初始化工具在手，可以控制其它所有工具。工程体系的执行分成三个层次：纯管理、制度化和自动化。
    5.工具体系的监控
      纯粹的社区方案比较难做到监控，但是如果我们使用了前面提到的统一命令行入口包装，那么就可以做一些简单的统计工作了。
      一般来说，以下指标跟开发者体验较为相关：
        · 调试 / 构建次数
        · 构建平均时长
        · 使用的工具版本
        · 发布次数
      工具的相关数据可以能够帮助发现一些问题，比如某个项目频繁发布，可能说明它风险很高；构建平均时长较长，可以对 webpack 做大量深度优化来改善开发体验。工具的相关数据还能帮我们发现老旧的工具，如果某个套件使用频率极低，则可以考虑把它下线。
      总之，工具体系的监控不仅仅是衡量工具体系的好帮手，也是非常珍贵的研发数据，里面有很多可挖掘的价值。

  三.持续集成
    1.概念
      持续集成是指在软件开发过程中，以定期或者实时的方式，集成所有人的工作成果，做统一的构建和测试，它是近现代软件工程中的一个非常重要的概念。
        · 优势：可以及早处理集成阶段的问题，使软件质量和开发进度可控。
        · 升级版本：持续交付和持续部署，但这些需要更为完善的基础设施。
        · 与持续集成相对的做法: 独立开发各个模块，在软件开发的最终阶段才做集成
      传统的持续集成概念诞生于桌面客户端开发，在 Web 前端领域，由于技术和产品形态的差别，需要构建的持续集成体系也有一些区别。
    2.持续集成总论
      传统软件的持续集成主要有以下措施：
        · daily build：每日构建，开发者每天提交代码到代码仓库，构建一个可运行的版本。
        · build verification test（BVT）：构建验证测试，每日构建版本出来后，运行一组自动化的测试用例，保证基本功能可用。
      对于前端来说，有一些现实的区别：
        · 前端代码按页面自然解耦，大部分页面都是单人开发
        · 前端构建逻辑简单，一般开发阶段都保证构建成功，不需要构建
        · 前端代码一般用于开发界面，测试自动化成本极高
        · 前端页面跳转，是基于 url，没有明确的产品边界
      基于以上分析，传统的持续集成方案放在前端，要么不需要，要么不适用，要么实施成本高。因此不能套用传统的持续集成理论，而需要重新思考前端领域的持续集成体系。