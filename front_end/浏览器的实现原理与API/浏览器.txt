浏览器
  一.浏览器工作过程
    1.基本过程
      对浏览器的实现者来说，他们做的事，就是把一个URL变成屏幕上显示的网页，过程是这样的：
        ① 浏览器首先使用HTTP协议或HTTPS协议，向服务端请求页面。
        ② 把请求回来的HTML代码经过解析，构建成DOM树。
        ③ 计算DOM树上的CSS属性。
        ④ 最后根据CSS属性逐个进行进行渲染，得到内存中的位图。
        ⑤ 一个可选的步骤：对位图进行合成，这会极大的增加后续绘制的速度。
        ⑥ 合成后，再绘制到页面上。
        图片：front_end\浏览器的实现原理与API\示例文件\image\浏览器工作基本过程.jpg
      这里的步骤，从HTTP请求回来开始，不是一步做完再做下一步，而是一条流水线。
      从HTTP请求回来，就产生了流式数据，后续的DOM树构建、CSS计算、渲染、合成、绘制，都是尽可能流式处理前一步的产出：即不需要等上一步骤完全结束，就开始处理上一步的输出。
    2.HTTP协议
      浏览器首先要做的事就是根据URL把数据取回来，取回数据使用的是HTTP协议，HTTP标准是由 IETF 组织制定的，跟它相关的标准主要有两份：
        · HTTP1.1 https://tools.ietf.org/html/rfc2616
        · HTTP1.1 https://tools.ietf.org/html/rfc7234
      HTTP协议是基于TCP协议出现的，对TCP协议来说，TCP是一条双向的通讯通道，HTTP在TCP的基础上，规定了 Request-Response 模式。这个模式决定了通讯一定是由浏览器端先发起的。
      大部分情况下，浏览器的实现者只需要一个TCP库，甚至一个现成的HTTP库就可以搞定浏览器的网络通讯部分。HTTP是纯粹的文本协议，它是规定了使用TCP协议来传输文本格式的应用层协议。
      (1)请求过程
        TCP通道中传输的完全是文本：
          例：front_end\浏览器的实现原理与API\示例文件\HTTP请求过程.txt
      (2)HTTP协议格式
        HTTP协议，大概可以分成以下部分：
          图片：front_end\浏览器的实现原理与API\示例文件\image\HTTP协议格式.jpg
        在这些部分中，path是请求的路径完全由服务端来定义，而version几乎都是固定字符串，response body是HTML。
        ① HTTP Method(方法)
          这是 request line 里面的方法部分。这里的方法跟编程中的方法意义类似，表示此次HTTP请求希望执行的操作类型。方法有以下八种定义：
            · GET: 浏览器通过地址栏访问的都是GET方法
            · POST: 表单提交产生POST方法
            · HEAD: 跟GET类似，只返回响应头，多数由JS发起
            · PUT: 表示添加资源，这只是语义上的约定，并没有强约束力
            · DELETE: 表示删除资源，这只是语义上的约定，并没有强约束力
            · CONNECT: 多用于HTTPS和WebSocket
            · OPTIONS: 表明请求想得到请求/响应链上关于此请求里的URI（Request-URI）指定资源的通信选项信息，一般用于调试，多数线上服务不支持。
            · TRACE: 被用于激发一个远程的，应用层的请求消息回路（注：TRACE方法让客户端测试到服务器的网络通路，回路的意思如发送一个请返回一个响应，这就是一个请求响应回路），一般用于调试，多数线上服务不支持。
        ② HTTP Status Code(状态码) 和 Status text(状态文本)
          常见的状态码有以下几种：
            · 1xx: 临时回应，表示客户端请继续。这个1xx状态，前端一般看不见，因为它会被浏览器HTTP库直接处理掉，不会让上层应用知晓。
            · 2xx: 请求成功
              200: 请求成功
            · 3xx: 表示请求的目标有变化，希望客户端进一步处理
              301: 当前资源永久性转移，这更接近于一种报错，提示客户端下次别来了
              302: 当前资源临时性转移
              304: 客户端本地已经有了缓存的版本，并且在 request 中告诉了服务端，当服务端通过时间或tag，发现没有更新时，就会返回一个不含body的304状态
            · 4xx: 客户端请求错误
              403: 无权限
              404: 表示请求的页面不存在
            · 5xx: 服务端请求错误
              500: 服务端错误
              503: 服务端暂时性错误，可以一会再试
        ③ HTTP Head(HTTP头)
          HTTP头可以看做一个键值对。原则上，HTTP头也是一种数据，