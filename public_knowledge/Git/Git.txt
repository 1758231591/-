Git 
  一.Git基础
    (1)特点
      · 最优的存储能力
      · 高性能
      · 开源
      · 容易备份
      · 支持离线操作
      · 容易定制工作流程
    (2)Git命令
      1.创建仓库命令
        · git clone 网址 : 克隆Git仓库到本地
        · git init: 创建Git仓库
          ① 把已有的项目代码纳入Git管理
            cd 项目代码所在的文件夹
            git init
          ② 新建的项目直接用Git管理
            cd 文件夹
            git init 项目文件名 #会在当前路径下创建和项目名称同名的文件夹
      2.查看Git
        · git status : 查看仓库当前的状态，显示有变更的文件。加上 -s 参数可以获取简短的输出
        · git diff [file]: 显示暂存区与工作区的差异
        · git diff --cached|--staged [file]: 显示暂存区和上一次提交(commit)的差异
        · git diff [first-branch]...[second-branch]: 显示两次提交之间的差异
        例: git diff 003e2f133adc5a53f21a72ca5b62eb08566121d1
            git diff 003e2f133adc5a53f21a72ca5b62eb08566121d1...e77f6c3cc85fd535c36df30813ed23e9fb8255d3
        · git log -[number] [分支名]: 查看历史提交记录
          例: git log -2  // 查看最近的两次提交记录
          ① --oneline 查看简要历史记录
          ② --graph   查看图形化的日志
          ③ --reverse 逆向显示日志
          ④ --author  查找指定用户的提交日志
        · git blame <file>: 以列表形式查看指定文件的修改记录
        · git cat-file [-t|-s|-p] 哈希值:
          ① -t 查看git对象的类型
          ② -s 查看git对象的大小
          ③ -p 查看git对象的内容
            例: git cat-file -p 003e2f133adc5a53f21a72ca5b62eb08566121d1
      3.文件操作
        · git add ./文件名/文件夹名: 将文件添加到暂存区，. 表示所有文件
        · git rm <file>: 将文件从暂存区和工作区中删除
            例: git rm hello.txt
          ① -f 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项
            例: git rm -f hello.txt
          ② --cached 想把文件从暂存区域移除，但仍然保留在当前工作目录中，换句话说，仅是从跟踪清单中删除
            例: git rm --cached hello.txt
          ③ -r 可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件
            例: git rm –r *   #删除当前目录下的所有文件和子目录
        · git mv [file] [newFile]: 用于移动或重命名一个文件、目录或软连接
          ① -f 重命名可以使用这个参数
            例: git mv -f hello.txt hello.css
      4.远程操作
        · git remote: 用于在远程仓库的操作
          git remote -v: 显示所有远程仓库
          git remote show [remote]: 显示某个远程仓库的信息
            例: git remote show https://github.com/1758231591/Learning-notes-and-materials.git
          git remote rm name: 删除远程仓库
          git remote rename old_name new_name: 修改仓库名
        · git fetch [alias]: 用于从远程获取代码库
          例: git fetch origin
        · git merge [alias]/[brach]: 将服务器上的任何更新合并到你的当前分支
          例: git merge origin/master
        · git pull <远程主机名> <远程分支名>:<本地分支名>: 从远程获取代码并合并本地的版本，其实就是 git fetch 和 git merge FETCH_HEAD 的简写
          例: git pull origin master       // 如果远程分支是与当前分支合并，则冒号后面的部分可以省略
              git pull origin master:main  // 将远程主机 origin 的 master 分支拉取过来，与本地的 main 分支合并
        · git push <远程主机名> <本地分支名>:<远程分支名>: 用于从将本地的分支版本上传到远程并合并
          例: 例: git push master 相当于 git push master:master
          ① --force 本地版本与远程版本有差异时，可以使用这个参数强制推送
          ② --d 删除远程主机的分支
      5.分支操作
        · git branch [branchName]: 不加name是列出本地分支，加name是创建分支
          ① -r 查看远程分支
            例: git branch -r
          ② -a 查看所有分支
          ③ -d/D <branchName> 删除分支，-D 是强制删除
          ④ -v 查看分支版本
        · git checkout [分支名]: 切换分支
          ① -b 创建并直接切换到新分支
            例: git checkout -b test
      6.版本操作
        · git commit: 主要是将暂存区里的改动给提交到本地的版本库
          ① -m 'message': 填写摘要信息
          ② -a 跳过暂存区，从工作区直接提交到本地版本库
          ③ --amend 追加提交，在不增加一个新的commit的情况下，将新修改的代码追加到前一次的commit中
        · git reset [--soft | --mixed | --hard] [HEAD]: 用于回退版本，可以指定退回某一次提交的版本
          ① --mixed 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。
            例: git reset HEAD^            # 回退所有内容到上一个版本  
                git reset HEAD^ hello.css  # 回退 hello.css 文件的版本到上一个版本  
                git reset  052e            # 回退到指定版本
          ② --soft 参数用于回退到某个版本。
            例: git reset --soft HEAD      # 回退到当前版本
          ③ --hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交，慎用。
            例: git reset –hard HEAD~3            # 回退上上上一个版本  
                git reset –hard bae128            # 回退到某个版本回退点之前的所有信息。 
                git reset --hard origin/master    # 将本地的状态回退到和远程的一样
        · git rebase: 合并提交记录
          ① -i 打开vim编辑模式，执行会自动打开vim编辑模式，合并的记录都有相同的指令 pick，下面有commands，根据这些指令可以修改，修改后ESC -> wq! 保存并退出，就会进入注释界面，编辑好后退出即可。
        
      7.其他
        · gitk: 打开 git 自带的图形界面工具
    (2)基础知识
      1.配置 user 信息
        · 添加配置
          git config [--local|--global|--system] user.name 'You name'
          git config [--local|--global|--system] user.email 'You email'
        · 查看配置
          git config --list [--local|--global|--system]
        · 区别
          local：区域为本仓库  global: 当前用户的所有仓库  system: 本系统的所有用户
      2.建Git仓库
        ① 把已有的项目代码纳入Git管理
          cd 项目代码所在的文件夹
          git init
        ② 新建的项目直接用Git管理
          cd 文件夹
          git init 项目文件名 #会在当前路径下创建和项目名称同名的文件夹
      3.添加文件流程
        git add files            工作目录 --> 暂存区
        git commit -m"原因"      暂存区   --> 本地仓库
      4. .git文件夹下的文件
        · HEAD: 指向当前所在的分支
        · config: 当前git的配置文件，这是个引用指向refs文件夹下的heads文件夹里的分支
        · refs文件夹: 
           ① heads文件夹: 存放当前项目的所有分支文件，每个分支文件存放的是当前分支对应的是哪个commit(提交)
           ② remotes文件夹: 存放远程分支
           ③ tags文件夹: 存放当前项目的所有标签
        · objects文件夹: 存放所有的git对象，对象哈希值前 2 位作为文件夹名称，后 38 位作为对象文件名, 可通过 git cat-file -p 命令，拼接文件夹名称+文件名查看
      5.git中 commit、tree和blob三个对象的关系
        commit是一个提交，它里面有一个tree对象对应唯一的tree，这个tree里面又有包含了多个tree和blob对象，每个tree对象又包含了多个tree和blob，文件的的最终形式是blob。对于blob，git会认为文件内容相同时，就使用同一个blob，这样就极大的避免了频繁提交时，git的存储空间大幅上升。
          图片: public_knowledge\Git\示例文件\image\Git课件.pdf
      6.git的底层运行流程
        添加或者修改了文件并且add到Stage Area之后，首先会根据文件内容创建不同的blob，当进行提交之后马上创建一个tree组件把需要的blob组件添加进去，之后再封装到一个commit组件中完成本次提交。
        在将来进行reset的时候可以直接使用git reset --hard xxxxx可以恢复到某个特定的版本，在reset之后，git会根据这个commit组件的id快速的找到tree组件，然后根据tree找到blob组件，之后对仓库进行还原，整个过程都是以hash和二进制进行操作，所以git执行效率非常之高。
        没有文件也就是没有blob对象的目录是不会被git管理的，因为git是对文件进行版本管理，所以没有必要对空目录生成对象。
      7.分离头指针情况下的注意事项
        分离头指针是指在没有任何分支的情况下做commit。
        优缺点: 用于实验性的更改与提交，随时可以放弃，而不影响任何分支的状态。缺点也是没有分支，意味着一旦切换分支，这些commit都会被当做垃圾丢弃。
      8.HEAD与branch
        HEAD在brach时，指代最新的commit，而在分离头状态时指代具体的commit。
        用法:
          · 一个节点，可以包含多个子节点(checkout出多个分支)
          · 一个节点可以有多个父节点(多个分支合并)
          · ^是~都是父节点，区别是跟随数字时候，^2 是第二个父节点，而~2是父节点的父节点
          · ^和~可以组合使用
            例: HEAD~2^2  最新commit的父节点的父节点的第二个父节点 
