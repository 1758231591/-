工作学习要点
  一.工作
    1.技术变现
      (1)关注有价值的东西
        价值是受供需关系影响的，供大于求，就没什么价值，供不应求，就有价值。不仅要看到市场，还要看到技术的趋势，能够分辨出什么是主流技术，什么是过渡式的技术。
          · 市场需求: 要看清市场，就需要看看各个公司都在做什么，他们的难题是什么。
          · 技术趋势: 了解技术发展轨迹是一件很重要的事。要看一个新的技术是否顺应技术发展趋势，你需要将一些老技术的本质吃得很透。另外，还有一个简单的判断方法，如果一个新的技术顺应技术发展趋势，那么在这个新的技术出现时，后面一定会有大型的商业公司支持，这类公司支持得越多，就说明你越需要关注。
      (2)动手能力很重要
        因为在解决任何一个具体问题的时候，有没有动手能力就成为了关键。代码里全是细节，细节是魔鬼，只有了解了细节，才能提出更好或是更靠谱、可以落地的解决方案。而不是一些笼统和模糊的东西。这太重要了。
      (3)找到能体现价值的地方
        在一家高速发展的公司中，技术人员的价值可以达到最大化。
      (4)关注技术付费点
        技术付费点基本体现在两个地方，一个是，能帮别人“挣钱”的地方；另一个是，能帮别人“省钱”的地方。
      (4)找到有价值的信息源
        信息社会，如果你比别人有更好的信息源，那么你就可以比别人成长得更快。用google搜索，而用好这个更好的信息源需要你的英文能力，因此不断提升英文能力很关键。
      
  二.学习
    1.要点
      (1)在学习技术的过程一定要多问自己两个问题
        · 这个技术解决什么问题？为什么别的同类技术做不到？
        · 为什么是这样解决的？有没有更好的方式？
    2.技术领导力
      什么是
        · 尊重技术，追求核心基础技术。
        · 追逐自动化的高效率的工具和技术，同时避免无效率的组织架构和管理。
        · 解放生产力，追逐人效的提高。
        · 开发抽象和高质量的可以重用的技术组件。
        · 坚持高于社会主流的技术标准和要求
      是什么
        · 发现问题: 能够发现现有方案的问题。
        · 能够提供解决问题的思路和方案，并能比较这些方案的优缺点: 能够做出正确的技术决定。用什么样的技术、什么解决方案、怎样实现来完成一个项目。
        · 能够用更优雅，更简单，更容易的方式来解决问题。
        · 能够提高代码或软件的扩展性、重用性和可维护性。
        · 能够用正确的方式管理团队: 
          ① 让正确的人做正确的事，并发挥每个人的潜力
          ② 可以提高团队的生产力和人效，找到最有价值的需求，用最少的成本实现之。并且，可以不断地提高自身和团队的标准。
        · 创新能力: 能够使用新的方法新的方式解决问题，追逐新的工具和技术。
      如何有
        ① 扎实的基础技术
          基础技术是各种上层技术共同的基础。吃透基础技术是为了更好地理解程序的运行原理，并基于这些基础技术做出更优化的产品。
          基础技术，可以分成两种:
            编程部分:
              · C语言: C 语言更接近底层。在具备跨平台能力的前提下，它可以比较容易地被人工翻译成相应的汇编代码。它的内存管理更为直接，可以让我们直接和内存地址打交道。
                好处: 能掌握程序的运行情况，并能进行应用程序和操作系统编程（操作系统一般是汇编和 C 语言）
              · 编程范式: 各种编程语言都有它们各自的编程范式，用于解决各种问题。
                好处: 学好编程范式，有助于培养抽象思维，同时也可以提高编程效率，提高程序的结构合理性、可读性和可维护性，降低代码的冗余度，进而提高代码的运行效率。还可以多了解各种程序设计语言的功能特性。
              · 算法和数据结构: 算法（及其相应的数据结构）是程序设计的有力支撑。适当地应用算法，可以有效地抽象问题，提高程序的合理性和执行效率。算法是编程中最最重要的东西，也是计算机科学中最重要的基础。学习算法不仅是为了写出运转更为高效的代码，而且更是为了能够写出可以覆盖更多场景的正确代码。
            系统部分:
              · 计算机系统原理: CPU 的体系结构（指令集 [CISC/RISC]、分支预测、缓存结构、总线、DMA、中断、陷阱、多任务、虚拟内存、虚拟化等），内存的原理与性能特点（SRAM、DRAM、DDR-SDRAM 等），磁盘的原理（机械硬盘 [盘面、磁头臂、磁头、启停区、寻道等]、固态硬盘 [页映射、块的合并与回收算法、TRIM 指令等]），GPU 的原理等。
                好处: 能够了解计算机的原理之外，还能举一反三地反推出高维度的分布式架构和高并发高可用的架构设计。
              · 操作系统原理和基础: 进程、进程管理、线程、线程调度、多核的缓存一致性、信号量、物理内存管理、虚拟内存管理、内存分配、文件系统、磁盘管理等。
                好处: 理解程序是怎样被管理的，操作系统对应用程序提供了怎样的支持，抽象出怎样的编程接口（比如 POSIX/Win32 API），性能特性如何（比如控制合理的上下文切换次数），怎样进行进程间通信（如管道、套接字、内存映射等），以便让不同的软件配合一起运行等。
                了解操作系统的原理，可以让你更能从本质理解各种语言或是技术的底层原理。一眼看透本质可以让你更容易地掌握和使用高阶技术。
              · 网络基础: 计算机网络是现代计算机不可或缺的一部分。需要了解基本的网络层次结构（ISO/OSI 模型、TCP/IP 协议栈），包括物理层、数据链路层（包含错误重发机制）、网络层（包含路由机制）、传输层（包含连接保持机制）、会话层、表示层、应用层（在 TCP/IP 协议栈里，这三层可以并为一层）。
                好处: 可以为高维分布式架构中的一些技术问题提供很多的技术方案。比如 TCP 的滑动窗口限流，完全可以用于分布式服务中的限流方案。
              · 数据库原理: 数据库管理系统是管理数据库的利器。通常操作系统提供文件系统来管理文件数据，而文件比较适合保存连续的信息，如一篇文章、一个图片等。但有时需要保存一个名字等较短的信息。如果单个文件只保存名字这样的几个字节的信息的话，就会浪费大量的磁盘空间，而且无法方便地查询（除非使用索引服务）。但数据库则更适合保存这种短的数据，而且可以方便地按字段进行查询。现代流行的数据库管理系统有两大类：SQL（基于 B+ 树，强一致性）和 NoSQL（较弱的一致性，较高的存取效率，基于哈希表或其他技术）。
                好处: 了解数据库访问性能调优的要点，以及保证并发情况下数据操作原子性的方法。
              · 分布式技术架构: 数据库和应用程序服务器在应对互联网上数以亿计的访问量的时候，需要能进行横向扩展，这样才能提供足够高的性能。为了做到这一点，要学习分布式技术架构，包括负载均衡、DNS 解析、多子域名、无状态应用层、缓存层、数据库分片、容错和恢复机制、Paxos、Map/Reduce 操作、分布式 SQL 数据库一致性（以 Google Cloud Spanner 为代表）等知识点。
        ② 非同一般的学习能力
        ③ 坚持做正确的事
        ④ 不断提高对自己的要求标准；